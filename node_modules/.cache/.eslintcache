[{"C:\\xampp\\public_html\\vamo\\interface2\\src\\index.js":"1","C:\\xampp\\public_html\\vamo\\interface2\\src\\initFirebase.js":"2","C:\\xampp\\public_html\\vamo\\interface2\\src\\App.js":"3"},{"size":360,"mtime":1632174925740,"results":"4","hashOfConfig":"5"},{"size":584,"mtime":1632167309991,"results":"6","hashOfConfig":"5"},{"size":4917,"mtime":1632933164253,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"zl5pzh",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\xampp\\public_html\\vamo\\interface2\\src\\index.js",["16","17","18"],"import { useState } from \"react\";\nimport { useRouter, } from \"next/router\";\nimport { firebase } from \"./initFirebase\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App, Home} from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","C:\\xampp\\public_html\\vamo\\interface2\\src\\initFirebase.js",[],"C:\\xampp\\public_html\\vamo\\interface2\\src\\App.js",["19","20","21"],"import React, {useState, useEffect} from 'react';\nimport {Line} from 'react-chartjs-2';\nimport { firebase } from \"./initFirebase\";\nimport { enableIndexedDbPersistence } from \"firebase/firestore\";\nimport { useRouter, } from \"next/router\";\n\nconst db = firebase.database();\nfunction Home() {\n  const [time, setTime] = useState(\"Time\");\n  const [temp, setTemp] = useState(\"Temp\");\n  const [altitude, setAltitude] = useState(\"Altitude\");\n  const [yaw, setYaw] = useState(\"Yaw\");\n  const router = useRouter();\n\n  return (\n    <main>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          const launchRef = db.ref(\"launch1\");\n          const newLaunchRef = launchRef.push();\n          newLaunchRef.set({\n            time,\n            temp,\n            altitude,\n            yaw,\n          });\n          \n        }}\n      >\n        <h1>Inserir dados</h1>\n        \n        <input\n          placeholder=\"Tempo\"\n          type=\"number\"\n          value={time}\n          onChange={(e) => setTime(e.target.value)}\n        />\n\n        <input\n          placeholder=\"Temperatura\"\n          type=\"number\"\n          value={temp}\n          onChange={(e) => setTemp(e.target.value)}\n        />\n\n        <input\n          placeholder=\"Altitude\"\n          type=\"number\"\n          value={altitude}\n          onChange={(e) => setAltitude(e.target.value)}\n        />\n\n        <input\n          placeholder=\"Yaw\"\n          type=\"number\"\n          value={yaw}\n          onChange={(e) => setYaw(e.target.value)}\n        />\n\n        <button type=\"submit\">Confirmar</button>\n      </form>\n    </main>\n  );\n\n}\n\nconst App = () => {\n  const launchRef = db.ref(\"launch1\");\n\n  const [temperatureData, setTemperatureData] = useState({});\n  const [altitudeData, setAltitudeData] = useState({});\n  const [yawData, setYawData] = useState({});\n  useEffect(() => {\n    \n      const onValueChange = launchRef.on(\"value\", function (snapshot) {\n        var tempo = [], temperatura = [], altitude = [], yaw = []\n        snapshot.forEach(function(childSnapshot) {\n        \n         tempo.push(childSnapshot.val().time);\n         temperatura.push(childSnapshot.val().temp);\n         altitude.push(childSnapshot.val().altitude);\n         yaw.push(childSnapshot.val().yaw);\n         \n         console.log(tempo,temperatura)\n         \n        });\n        setTemperatureData({\n          datasets: [\n            {\n              label: 'Temperatura',\n              data: temperatura,\n              backgroundColor: 'rgba(255, 99, 132, 1)',\n              hoverBackgroundColor: \"rgba(255, 99, 132, 1)\",\n              hoverBorderColor: \"black\",\n              borderColor: 'rgba(255, 99, 132, 1)',\n              borderWidth: 2\n            }\n          ], \n          labels: tempo\n        });\n        setAltitudeData({\n          datasets: [\n            {\n              label: 'Altitude',\n              data: altitude,\n              backgroundColor: 'rgba(19, 240, 14, 1)',\n              hoverBackgroundColor: 'rgba(19, 240, 14, 1)',\n              hoverBorderColor: \"black\",\n              borderColor: 'rgba(19, 240, 14, 1)',\n              borderWidth: 2\n            }\n          ], \n          labels: tempo\n        });\n        setYawData({\n          datasets: [\n            {\n              label: 'Yaw',\n              data: yaw,\n              backgroundColor: 'rgba(139, 0, 249, 1)',\n              hoverBackgroundColor: 'rgba(139, 0, 249, 1)',\n              hoverBorderColor: \"black\",\n              borderColor: 'rgba(139, 0, 249, 1)',\n              borderWidth: 2\n            }\n          ], \n          labels: tempo\n        });\n      });   \n    return () => launchRef.off(\"value\",onValueChange);\n  }, [])\n  \n  const temperatureOptions = {\n    elements: {\n        point:{\n            radius: 1\n        }\n    },\n    scales: {\n      y: {\n          ticks: {\n              callback: function(value, index, values) {\n                  return value + \"Â°C\";\n              }\n          },\n      }\n    },\n    responsive:false\n  }\n  const altitudeOptions = {\n    elements: {\n        point:{\n            radius: 1\n        }\n    },\n    scales: {\n      y: {\n          ticks: {\n              callback: function(value, index, values) {\n                  return value + \"m\";\n              }\n          },\n      }\n    },\n    responsive:false\n  }\n  const yawOptions = {\n    elements: {\n        point:{\n            radius: 1\n        }\n    },\n    scales: {\n      y: {\n          ticks: {\n              callback: function(value, index, values) {\n                  return value + \"\";\n              }\n          },\n      }\n    },\n    responsive:false\n  }\n  \n  return <>\n    <Line id=\"chart\" width=\"1500\" height=\"320\" data={temperatureData} options={temperatureOptions}/> \n    <Line id=\"chart\" width=\"1500\" height=\"320\" data={altitudeData} options={altitudeOptions}/> \n    <Line id=\"chart\" width=\"1500\" height=\"320\" data={yawData} options={yawOptions}/> \n  </>\n}\n\nexport {Home, App};",{"ruleId":"22","severity":1,"message":"23","line":1,"column":10,"nodeType":"24","messageId":"25","endLine":1,"endColumn":18},{"ruleId":"22","severity":1,"message":"26","line":2,"column":10,"nodeType":"24","messageId":"25","endLine":2,"endColumn":19},{"ruleId":"22","severity":1,"message":"27","line":3,"column":10,"nodeType":"24","messageId":"25","endLine":3,"endColumn":18},{"ruleId":"22","severity":1,"message":"28","line":4,"column":10,"nodeType":"24","messageId":"25","endLine":4,"endColumn":36},{"ruleId":"22","severity":1,"message":"29","line":13,"column":9,"nodeType":"24","messageId":"25","endLine":13,"endColumn":15},{"ruleId":"30","severity":1,"message":"31","line":132,"column":6,"nodeType":"32","endLine":132,"endColumn":8,"suggestions":"33"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRouter' is defined but never used.","'firebase' is defined but never used.","'enableIndexedDbPersistence' is defined but never used.","'router' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'launchRef'. Either include it or remove the dependency array.","ArrayExpression",["34"],{"desc":"35","fix":"36"},"Update the dependencies array to be: [launchRef]",{"range":"37","text":"38"},[3663,3665],"[launchRef]"]