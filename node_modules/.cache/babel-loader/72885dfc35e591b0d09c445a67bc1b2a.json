{"ast":null,"code":"'use strict';\n\nconst Header = require('./header');\n\nconst Media = require('./media');\n\nconst internals = {\n  options: {\n    charset: {\n      type: 'accept-charset'\n    },\n    encoding: {\n      type: 'accept-encoding',\n      default: 'identity',\n      equivalents: new Map([['x-compress', 'compress'], ['x-gzip', 'gzip']])\n    },\n    language: {\n      type: 'accept-language',\n      prefixMatch: true\n    }\n  }\n};\n\nfor (const type in internals.options) {\n  exports[type] = (header, preferences) => Header.selection(header, preferences, internals.options[type]);\n\n  exports[`${type}s`] = (header, preferences) => Header.selections(header, preferences, internals.options[type]);\n}\n\nexports.mediaType = (header, preferences) => Media.selection(header, preferences);\n\nexports.mediaTypes = (header, preferences) => Media.selections(header, preferences);\n\nexports.parseAll = function (requestHeaders) {\n  return {\n    charsets: exports.charsets(requestHeaders['accept-charset']),\n    encodings: exports.encodings(requestHeaders['accept-encoding']),\n    languages: exports.languages(requestHeaders['accept-language']),\n    mediaTypes: exports.mediaTypes(requestHeaders.accept)\n  };\n};","map":{"version":3,"sources":["C:/xampp/public_html/vamo/interface2/node_modules/@hapi/accept/lib/index.js"],"names":["Header","require","Media","internals","options","charset","type","encoding","default","equivalents","Map","language","prefixMatch","exports","header","preferences","selection","selections","mediaType","mediaTypes","parseAll","requestHeaders","charsets","encodings","languages","accept"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAGA,MAAME,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAE;AADD,KADJ;AAILC,IAAAA,QAAQ,EAAE;AACND,MAAAA,IAAI,EAAE,iBADA;AAENE,MAAAA,OAAO,EAAE,UAFH;AAGNC,MAAAA,WAAW,EAAE,IAAIC,GAAJ,CAAQ,CACjB,CAAC,YAAD,EAAe,UAAf,CADiB,EAEjB,CAAC,QAAD,EAAW,MAAX,CAFiB,CAAR;AAHP,KAJL;AAYLC,IAAAA,QAAQ,EAAE;AACNL,MAAAA,IAAI,EAAE,iBADA;AAENM,MAAAA,WAAW,EAAE;AAFP;AAZL;AADK,CAAlB;;AAqBA,KAAK,MAAMN,IAAX,IAAmBH,SAAS,CAACC,OAA7B,EAAsC;AAClCS,EAAAA,OAAO,CAACP,IAAD,CAAP,GAAgB,CAACQ,MAAD,EAASC,WAAT,KAAyBf,MAAM,CAACgB,SAAP,CAAiBF,MAAjB,EAAyBC,WAAzB,EAAsCZ,SAAS,CAACC,OAAV,CAAkBE,IAAlB,CAAtC,CAAzC;;AAEAO,EAAAA,OAAO,CAAE,GAAEP,IAAK,GAAT,CAAP,GAAsB,CAACQ,MAAD,EAASC,WAAT,KAAyBf,MAAM,CAACiB,UAAP,CAAkBH,MAAlB,EAA0BC,WAA1B,EAAuCZ,SAAS,CAACC,OAAV,CAAkBE,IAAlB,CAAvC,CAA/C;AACH;;AAGDO,OAAO,CAACK,SAAR,GAAoB,CAACJ,MAAD,EAASC,WAAT,KAAyBb,KAAK,CAACc,SAAN,CAAgBF,MAAhB,EAAwBC,WAAxB,CAA7C;;AAEAF,OAAO,CAACM,UAAR,GAAqB,CAACL,MAAD,EAASC,WAAT,KAAyBb,KAAK,CAACe,UAAN,CAAiBH,MAAjB,EAAyBC,WAAzB,CAA9C;;AAGAF,OAAO,CAACO,QAAR,GAAmB,UAAUC,cAAV,EAA0B;AAEzC,SAAO;AACHC,IAAAA,QAAQ,EAAET,OAAO,CAACS,QAAR,CAAiBD,cAAc,CAAC,gBAAD,CAA/B,CADP;AAEHE,IAAAA,SAAS,EAAEV,OAAO,CAACU,SAAR,CAAkBF,cAAc,CAAC,iBAAD,CAAhC,CAFR;AAGHG,IAAAA,SAAS,EAAEX,OAAO,CAACW,SAAR,CAAkBH,cAAc,CAAC,iBAAD,CAAhC,CAHR;AAIHF,IAAAA,UAAU,EAAEN,OAAO,CAACM,UAAR,CAAmBE,cAAc,CAACI,MAAlC;AAJT,GAAP;AAMH,CARD","sourcesContent":["'use strict';\n\nconst Header = require('./header');\nconst Media = require('./media');\n\n\nconst internals = {\n    options: {\n        charset: {\n            type: 'accept-charset'\n        },\n        encoding: {\n            type: 'accept-encoding',\n            default: 'identity',\n            equivalents: new Map([\n                ['x-compress', 'compress'],\n                ['x-gzip', 'gzip']\n            ])\n        },\n        language: {\n            type: 'accept-language',\n            prefixMatch: true\n        }\n    }\n};\n\n\nfor (const type in internals.options) {\n    exports[type] = (header, preferences) => Header.selection(header, preferences, internals.options[type]);\n\n    exports[`${type}s`] = (header, preferences) => Header.selections(header, preferences, internals.options[type]);\n}\n\n\nexports.mediaType = (header, preferences) => Media.selection(header, preferences);\n\nexports.mediaTypes = (header, preferences) => Media.selections(header, preferences);\n\n\nexports.parseAll = function (requestHeaders) {\n\n    return {\n        charsets: exports.charsets(requestHeaders['accept-charset']),\n        encodings: exports.encodings(requestHeaders['accept-encoding']),\n        languages: exports.languages(requestHeaders['accept-language']),\n        mediaTypes: exports.mediaTypes(requestHeaders.accept)\n    };\n};\n"]},"metadata":{},"sourceType":"script"}