{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.searchParamsToUrlQuery = searchParamsToUrlQuery;\nexports.urlQueryToSearchParams = urlQueryToSearchParams;\nexports.assign = assign;\n\nfunction searchParamsToUrlQuery(searchParams) {\n  const query = {};\n  searchParams.forEach((value, key) => {\n    if (typeof query[key] === 'undefined') {\n      query[key] = value;\n    } else if (Array.isArray(query[key])) {\n      query[key].push(value);\n    } else {\n      query[key] = [query[key], value];\n    }\n  });\n  return query;\n}\n\nfunction stringifyUrlQueryParam(param) {\n  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {\n    return String(param);\n  } else {\n    return '';\n  }\n}\n\nfunction urlQueryToSearchParams(urlQuery) {\n  const result = new URLSearchParams();\n  Object.entries(urlQuery).forEach(([key, value]) => {\n    if (Array.isArray(value)) {\n      value.forEach(item => result.append(key, stringifyUrlQueryParam(item)));\n    } else {\n      result.set(key, stringifyUrlQueryParam(value));\n    }\n  });\n  return result;\n}\n\nfunction assign(target, ...searchParamsList) {\n  searchParamsList.forEach(searchParams => {\n    Array.from(searchParams.keys()).forEach(key => target.delete(key));\n    searchParams.forEach((value, key) => target.append(key, value));\n  });\n  return target;\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/querystring.ts"],"names":[],"mappings":";;;;;QAEgB,sB,GAAA,sB;QA4BA,sB,GAAA,sB;QAcA,M,GAAA,M;;SA1CA,sB,CACd,Y,EACgB;AAChB,QAAM,KAAK,GAAA,EAAX;AACA,EAAA,YAAY,CAAC,OAAb,CAAoB,CAAE,KAAF,EAAS,GAAT,KAAiB;AACnC,QAAE,OAAS,KAAK,CAAC,GAAD,CAAd,KAAkB,WAApB,EAAuC;AACrC,MAAA,KAAK,CAAC,GAAD,CAAL,GAAa,KAAb;AACD,KAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,GAAD,CAAnB,CAAJ,EAA+B;AAClC,MAAA,KAAK,CAAC,GAAD,CAAL,CAAwB,IAAxB,CAA6B,KAA7B;AACH,KAFM,MAEA;AACL,MAAA,KAAK,CAAC,GAAD,CAAL,GAAS,CAAK,KAAK,CAAC,GAAD,CAAV,EAA2B,KAA3B,CAAT;AACD;AACF,GARD;SASO,K;AACR;;SAEQ,sB,CAAuB,K,EAAuB;AACrD,MAAE,OACO,KADP,KACY,QADZ,IACyB,OACjB,KADiB,KACZ,QADY,IACC,CAAK,KAAK,CAAC,KAAD,CAFpC,IAE0C,OACnC,KADmC,KAC9B,SAHd,EAIE;WACO,MAAM,CAAC,KAAD,C;AACd,GAND,MAMO;;AAEN;AACF;;SAEe,sB,CACd,Q,EACiB;AACjB,QAAM,MAAM,GAAG,IAAI,eAAJ,EAAf;AACA,EAAA,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,OAAzB,CAAgC,CAAA,CAAG,GAAH,EAAQ,KAAR,CAAA,KAAmB;AACjD,QAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB,MAAA,KAAK,CAAC,OAAN,CAAe,IAAF,IAAW,MAAM,CAAC,MAAP,CAAc,GAAd,EAAmB,sBAAsB,CAAC,IAAD,CAAzC,CAAxB;AACD,KAFD,MAEO;AACL,MAAA,MAAM,CAAC,GAAP,CAAW,GAAX,EAAgB,sBAAsB,CAAC,KAAD,CAAtC;AACD;AACF,GAND;SAOO,M;AACR;;SAEe,M,CACd,M,EAAuB,GACpB,gB,EACc;AACjB,EAAA,gBAAgB,CAAC,OAAjB,CAA0B,YAAF,IAAmB;AACzC,IAAA,KAAK,CAAC,IAAN,CAAW,YAAY,CAAC,IAAb,EAAX,EAAgC,OAAhC,CAAyC,GAAF,IAAU,MAAM,CAAC,MAAP,CAAc,GAAd,CAAjD;AACA,IAAA,YAAY,CAAC,OAAb,CAAoB,CAAE,KAAF,EAAS,GAAT,KAAiB,MAAM,CAAC,MAAP,CAAc,GAAd,EAAmB,KAAnB,CAArC;AACD,GAHD;SAIO,M;AACR","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\n\nexport function searchParamsToUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  const query: ParsedUrlQuery = {}\n  searchParams.forEach((value, key) => {\n    if (typeof query[key] === 'undefined') {\n      query[key] = value\n    } else if (Array.isArray(query[key])) {\n      ;(query[key] as string[]).push(value)\n    } else {\n      query[key] = [query[key] as string, value]\n    }\n  })\n  return query\n}\n\nfunction stringifyUrlQueryParam(param: string): string {\n  if (\n    typeof param === 'string' ||\n    (typeof param === 'number' && !isNaN(param)) ||\n    typeof param === 'boolean'\n  ) {\n    return String(param)\n  } else {\n    return ''\n  }\n}\n\nexport function urlQueryToSearchParams(\n  urlQuery: ParsedUrlQuery\n): URLSearchParams {\n  const result = new URLSearchParams()\n  Object.entries(urlQuery).forEach(([key, value]) => {\n    if (Array.isArray(value)) {\n      value.forEach((item) => result.append(key, stringifyUrlQueryParam(item)))\n    } else {\n      result.set(key, stringifyUrlQueryParam(value))\n    }\n  })\n  return result\n}\n\nexport function assign(\n  target: URLSearchParams,\n  ...searchParamsList: URLSearchParams[]\n): URLSearchParams {\n  searchParamsList.forEach((searchParams) => {\n    Array.from(searchParams.keys()).forEach((key) => target.delete(key))\n    searchParams.forEach((value, key) => target.append(key, value))\n  })\n  return target\n}\n"]},"metadata":{},"sourceType":"script"}