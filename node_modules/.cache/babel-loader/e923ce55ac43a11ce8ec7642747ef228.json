{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withCoalescedInvoke = withCoalescedInvoke;\nconst globalInvokeCache = new Map();\n\nfunction withCoalescedInvoke(func) {\n  return async function (key, args) {\n    const entry = globalInvokeCache.get(key);\n\n    if (entry) {\n      return entry.then(res => ({\n        isOrigin: false,\n        value: res.value\n      }));\n    }\n\n    async function __wrapper() {\n      return await func.apply(undefined, args);\n    }\n\n    const future = __wrapper().then(res => {\n      globalInvokeCache.delete(key);\n      return {\n        isOrigin: true,\n        value: res\n      };\n    }).catch(err => {\n      globalInvokeCache.delete(key);\n      return Promise.reject(err);\n    });\n\n    globalInvokeCache.set(key, future);\n    return future;\n  };\n}","map":{"version":3,"sources":["../../lib/coalesced-function.ts"],"names":[],"mappings":";;;;;QASgB,mB,GAAA,mB;AAFhB,MAAM,iBAAiB,GAAG,IAAI,GAAJ,EAA1B;;SAEgB,mB,CACd,I,EAI0D;yBACnC,G,EAAa,I,EAAqB;AACvD,UAAM,KAAK,GAAG,iBAAiB,CAAC,GAAlB,CAAsB,GAAtB,CAAd;;AACA,QAAI,KAAJ,EAAW;aACF,KAAK,CAAC,IAAN,CAAY,GAAF,KAAK;AACpB,QAAA,QAAQ,EAAE,KADU;AAEpB,QAAA,KAAK,EAAE,GAAG,CAAC;AAFS,OAAL,CAAV,C;AAIR;;mBAEc,S,GAAY;mBACZ,IAAI,CAAC,KAAL,CAAW,SAAX,EAAsB,IAAtB,C;AACd;;AAED,UAAM,MAAM,GAAG,SAAS,GACrB,IADY,CACN,GAAF,IAAU;AACb,MAAA,iBAAiB,CAAC,MAAlB,CAAyB,GAAzB;;AACS,QAAA,QAAQ,EAAE,I;AAAM,QAAA,KAAK,EAAE;;AACjC,KAJY,EAKZ,KALY,CAKL,GAAF,IAAU;AACd,MAAA,iBAAiB,CAAC,MAAlB,CAAyB,GAAzB;aACO,OAAO,CAAC,MAAR,CAAe,GAAf,C;AACR,KARY,CAAf;;AASA,IAAA,iBAAiB,CAAC,GAAlB,CAAsB,GAAtB,EAA2B,MAA3B;WACO,M;AACR,G;AACF","sourcesContent":["type CoalescedInvoke<T> = {\n  isOrigin: boolean\n  value: T\n}\n\nexport type UnwrapPromise<T> = T extends Promise<infer U> ? U : T\n\nconst globalInvokeCache = new Map<string, Promise<CoalescedInvoke<unknown>>>()\n\nexport function withCoalescedInvoke<F extends (...args: any) => any>(\n  func: F\n): (\n  key: string,\n  args: Parameters<F>\n) => Promise<CoalescedInvoke<UnwrapPromise<ReturnType<F>>>> {\n  return async function (key: string, args: Parameters<F>) {\n    const entry = globalInvokeCache.get(key)\n    if (entry) {\n      return entry.then((res) => ({\n        isOrigin: false,\n        value: res.value as UnwrapPromise<ReturnType<F>>,\n      }))\n    }\n\n    async function __wrapper() {\n      return await func.apply(undefined, args)\n    }\n\n    const future = __wrapper()\n      .then((res) => {\n        globalInvokeCache.delete(key)\n        return { isOrigin: true, value: res as UnwrapPromise<ReturnType<F>> }\n      })\n      .catch((err) => {\n        globalInvokeCache.delete(key)\n        return Promise.reject(err)\n      })\n    globalInvokeCache.set(key, future)\n    return future\n  }\n}\n"]},"metadata":{},"sourceType":"script"}