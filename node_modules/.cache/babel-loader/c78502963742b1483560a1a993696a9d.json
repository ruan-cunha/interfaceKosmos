{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _cssnanoSimple = _interopRequireDefault(require(\"cssnano-simple\"));\n\nvar _postcssScss = _interopRequireDefault(require(\"next/dist/compiled/postcss-scss\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _webpack = require(\"next/dist/compiled/webpack/webpack\");\n\nvar _trace = require(\"../../../telemetry/trace\");\n\nvar _profilingPlugin = require(\"./profiling-plugin\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // https://github.com/NMFR/optimize-css-assets-webpack-plugin/blob/0a410a9bf28c7b0e81a3470a13748e68ca2f50aa/src/index.js#L20\n\n\nconst CSS_REGEX = /\\.css(\\?.*)?$/i;\n\nclass CssMinimizerPlugin {\n  constructor(options) {\n    this.__next_css_remove = true;\n    this.options = options;\n  }\n\n  optimizeAsset(file, asset) {\n    const postcssOptions = { ...this.options.postcssOptions,\n      to: file,\n      from: file,\n      // We don't actually add this parser to support Sass. It can also be used\n      // for inline comment support. See the README:\n      // https://github.com/postcss/postcss-scss/blob/master/README.md#2-inline-comments-for-postcss\n      parser: _postcssScss.default\n    };\n    let input;\n\n    if (postcssOptions.map && asset.sourceAndMap) {\n      const {\n        source,\n        map\n      } = asset.sourceAndMap();\n      input = source;\n      postcssOptions.map.prev = map ? map : false;\n    } else {\n      input = asset.source();\n    }\n\n    return (0, _postcss).default([(0, _cssnanoSimple).default({}, _postcss.default)]).process(input, postcssOptions).then(res => {\n      if (res.map) {\n        return new _webpack.sources.SourceMapSource(res.css, file, res.map.toJSON());\n      } else {\n        return new _webpack.sources.RawSource(res.css);\n      }\n    });\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap('CssMinimizerPlugin', compilation => {\n      if (_webpack.isWebpack5) {\n        const cache = compilation.getCache('CssMinimizerPlugin');\n        compilation.hooks.processAssets.tapPromise({\n          name: 'CssMinimizerPlugin',\n          // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n          stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n        }, async assets => {\n          const compilerSpan = _profilingPlugin.spans.get(compiler);\n\n          const cssMinimizerSpan = compilerSpan.traceChild('css-minimizer-plugin');\n          cssMinimizerSpan.setAttribute('webpackVersion', 5);\n          return cssMinimizerSpan.traceAsyncFn(async () => {\n            const files = Object.keys(assets);\n            await Promise.all(files.filter(file => CSS_REGEX.test(file)).map(async file => {\n              const assetSpan = cssMinimizerSpan.traceChild('minify-css');\n              assetSpan.setAttribute('file', file);\n              return assetSpan.traceAsyncFn(async () => {\n                const asset = assets[file];\n                const etag = cache.getLazyHashedEtag(asset);\n                const cachedResult = await cache.getPromise(file, etag);\n                assetSpan.setAttribute('cache', cachedResult ? 'HIT' : 'MISS');\n\n                if (cachedResult) {\n                  assets[file] = cachedResult;\n                  return;\n                }\n\n                const result = await this.optimizeAsset(file, asset);\n                await cache.storePromise(file, etag, result);\n                assets[file] = result;\n              });\n            }));\n          });\n        });\n        return;\n      }\n\n      compilation.hooks.optimizeChunkAssets.tapPromise('CssMinimizerPlugin', chunks => {\n        const compilerSpan = _profilingPlugin.spans.get(compiler);\n\n        const cssMinimizerSpan = (0, _trace).trace('css-minimizer-plugin', compilerSpan === null || compilerSpan === void 0 ? void 0 : compilerSpan.id);\n        cssMinimizerSpan.setAttribute('webpackVersion', 4);\n        cssMinimizerSpan.setAttribute('compilationName', compilation.name);\n        return cssMinimizerSpan.traceAsyncFn(async () => {\n          return await Promise.all(chunks.reduce((acc, chunk) => acc.concat(chunk.files || []), []).filter(entry => CSS_REGEX.test(entry)).map(async file => {\n            const assetSpan = (0, _trace).trace('minify-css', cssMinimizerSpan.id);\n            assetSpan.setAttribute('file', file);\n            return assetSpan.traceAsyncFn(async () => {\n              const asset = compilation.assets[file]; // Makes trace attributes the same as webpack 5\n              // When using webpack 4 the result is not cached\n\n              assetSpan.setAttribute('cache', 'MISS');\n              compilation.assets[file] = await this.optimizeAsset(file, asset);\n            });\n          }));\n        });\n      });\n    });\n  }\n\n}\n\nexports.CssMinimizerPlugin = CssMinimizerPlugin;","map":{"version":3,"sources":["../../../../build/webpack/plugins/css-minimizer-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import cssnanoSimple from 'cssnano-simple'\nimport postcssScss from 'next/dist/compiled/postcss-scss'\nimport postcss, { Parser } from 'postcss'\nimport {\n  webpack,\n  isWebpack5,\n  sources,\n} from 'next/dist/compiled/webpack/webpack'\nimport { trace } from '../../../telemetry/trace'\nimport { spans } from './profiling-plugin'\n\n// https://github.com/NMFR/optimize-css-assets-webpack-plugin/blob/0a410a9bf28c7b0e81a3470a13748e68ca2f50aa/src/index.js#L20\nconst CSS_REGEX = /\\.css(\\?.*)?$/i\n\ntype CssMinimizerPluginOptions = {\n  postcssOptions: {\n    map: false | { prev?: string | false; inline: boolean; annotation: boolean }\n  }\n}\n\nexport class CssMinimizerPlugin {\n  __next_css_remove = true\n\n  private options: CssMinimizerPluginOptions\n\n  constructor(options: CssMinimizerPluginOptions) {\n    this.options = options\n  }\n\n  optimizeAsset(file: string, asset: any) {\n    const postcssOptions = {\n      ...this.options.postcssOptions,\n      to: file,\n      from: file,\n\n      // We don't actually add this parser to support Sass. It can also be used\n      // for inline comment support. See the README:\n      // https://github.com/postcss/postcss-scss/blob/master/README.md#2-inline-comments-for-postcss\n      parser: postcssScss as any as Parser,\n    }\n\n    let input: string\n    if (postcssOptions.map && asset.sourceAndMap) {\n      const { source, map } = asset.sourceAndMap()\n      input = source\n      postcssOptions.map.prev = map ? map : false\n    } else {\n      input = asset.source()\n    }\n\n    return postcss([cssnanoSimple({}, postcss)])\n      .process(input, postcssOptions)\n      .then((res) => {\n        if (res.map) {\n          return new sources.SourceMapSource(res.css, file, res.map.toJSON())\n        } else {\n          return new sources.RawSource(res.css)\n        }\n      })\n  }\n\n  apply(compiler: webpack.Compiler) {\n    compiler.hooks.compilation.tap('CssMinimizerPlugin', (compilation: any) => {\n      if (isWebpack5) {\n        const cache = compilation.getCache('CssMinimizerPlugin')\n        compilation.hooks.processAssets.tapPromise(\n          {\n            name: 'CssMinimizerPlugin',\n            // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n            stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n          },\n          async (assets: any) => {\n            const compilerSpan = spans.get(compiler)\n            const cssMinimizerSpan = compilerSpan!.traceChild(\n              'css-minimizer-plugin'\n            )\n            cssMinimizerSpan.setAttribute('webpackVersion', 5)\n\n            return cssMinimizerSpan.traceAsyncFn(async () => {\n              const files = Object.keys(assets)\n              await Promise.all(\n                files\n                  .filter((file) => CSS_REGEX.test(file))\n                  .map(async (file) => {\n                    const assetSpan = cssMinimizerSpan.traceChild('minify-css')\n                    assetSpan.setAttribute('file', file)\n\n                    return assetSpan.traceAsyncFn(async () => {\n                      const asset = assets[file]\n\n                      const etag = cache.getLazyHashedEtag(asset)\n\n                      const cachedResult = await cache.getPromise(file, etag)\n\n                      assetSpan.setAttribute(\n                        'cache',\n                        cachedResult ? 'HIT' : 'MISS'\n                      )\n                      if (cachedResult) {\n                        assets[file] = cachedResult\n                        return\n                      }\n\n                      const result = await this.optimizeAsset(file, asset)\n                      await cache.storePromise(file, etag, result)\n                      assets[file] = result\n                    })\n                  })\n              )\n            })\n          }\n        )\n        return\n      }\n      compilation.hooks.optimizeChunkAssets.tapPromise(\n        'CssMinimizerPlugin',\n        (chunks: webpack.compilation.Chunk[]) => {\n          const compilerSpan = spans.get(compiler)\n          const cssMinimizerSpan = trace(\n            'css-minimizer-plugin',\n            compilerSpan?.id\n          )\n          cssMinimizerSpan.setAttribute('webpackVersion', 4)\n          cssMinimizerSpan.setAttribute('compilationName', compilation.name)\n\n          return cssMinimizerSpan.traceAsyncFn(async () => {\n            return await Promise.all(\n              chunks\n                .reduce(\n                  (acc, chunk) => acc.concat(chunk.files || []),\n                  [] as string[]\n                )\n                .filter((entry) => CSS_REGEX.test(entry))\n                .map(async (file) => {\n                  const assetSpan = trace('minify-css', cssMinimizerSpan.id)\n                  assetSpan.setAttribute('file', file)\n\n                  return assetSpan.traceAsyncFn(async () => {\n                    const asset = compilation.assets[file]\n                    // Makes trace attributes the same as webpack 5\n                    // When using webpack 4 the result is not cached\n                    assetSpan.setAttribute('cache', 'MISS')\n                    compilation.assets[file] = await this.optimizeAsset(\n                      file,\n                      asset\n                    )\n                  })\n                })\n            )\n          })\n        }\n      )\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}