{"ast":null,"code":"\"use strict\";\n\nvar _nodeFetch = _interopRequireWildcard(require(\"node-fetch\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n} // Polyfill fetch() in the Node.js environment\n\n\nif (!global.fetch) {\n  const agent = ({\n    protocol\n  }) => protocol === 'http:' ? global.__NEXT_HTTP_AGENT : global.__NEXT_HTTPS_AGENT;\n\n  const fetchWithAgent = (url, opts, ...rest) => {\n    if (!opts) {\n      opts = {\n        agent\n      };\n    } else if (!opts.agent) {\n      opts.agent = agent;\n    }\n\n    return (0, _nodeFetch).default(url, opts, ...rest);\n  };\n\n  global.fetch = fetchWithAgent;\n  global.Headers = _nodeFetch.Headers;\n  global.Request = _nodeFetch.Request;\n  global.Response = _nodeFetch.Response;\n}","map":{"version":3,"sources":["../../server/node-polyfill-fetch.js"],"names":[],"mappings":";;AAAkD,IAAA,UAAY,GAAA,uBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAZ;;;;;;;;;;;;;;;;;;;;;;;;;EAElD;;;AACA,IAAE,CAAG,MAAM,CAAC,KAAZ,EAAmB;AACjB,QAAM,KAAK,GAAA,CAAA;AAAM,IAAA;AAAN,GAAA,KACT,QAAQ,KAAA,OAAR,GAAuB,MAAM,CAAC,iBAA9B,GAAkD,MAAM,CAAC,kBAD3D;;AAEA,QAAM,cAAc,GAAA,CAAI,GAAJ,EAAS,IAAT,EAAa,GAAK,IAAlB,KAA2B;AAC7C,QAAE,CAAG,IAAL,EAAW;AACT,MAAA,IAAI,GAAA;AAAK,QAAA;AAAL,OAAJ;AACD,KAFD,MAEO,IAAE,CAAG,IAAI,CAAC,KAAV,EAAiB;AACtB,MAAA,IAAI,CAAC,KAAL,GAAa,KAAb;AACD;;eAX6C,U,EAAY,O,CAY7C,G,EAAK,I,EAAI,GAAK,I;AAC5B,GAPD;;AAQA,EAAA,MAAM,CAAC,KAAP,GAAe,cAAf;AACA,EAAA,MAAM,CAAC,OAAP,GAfgD,UAAY,CAAA,OAe5D;AACA,EAAA,MAAM,CAAC,OAAP,GAhBgD,UAAY,CAAA,OAgB5D;AACA,EAAA,MAAM,CAAC,QAAP,GAjBgD,UAAY,CAAA,QAiB5D;AACD","sourcesContent":["import fetch, { Headers, Request, Response } from 'node-fetch'\n\n// Polyfill fetch() in the Node.js environment\nif (!global.fetch) {\n  const agent = ({ protocol }) =>\n    protocol === 'http:' ? global.__NEXT_HTTP_AGENT : global.__NEXT_HTTPS_AGENT\n  const fetchWithAgent = (url, opts, ...rest) => {\n    if (!opts) {\n      opts = { agent }\n    } else if (!opts.agent) {\n      opts.agent = agent\n    }\n    return fetch(url, opts, ...rest)\n  }\n  global.fetch = fetchWithAgent\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n"]},"metadata":{},"sourceType":"script"}