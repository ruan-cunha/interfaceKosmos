{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRawProjectId = getRawProjectId;\n\nvar _childProcess = require(\"child_process\"); // Q: Why does Next.js need a project ID? Why is it looking at my git remote?\n// A:\n// Next.js' telemetry is and always will be completely anonymous. Because of\n// this, we need a way to differentiate different projects to track feature\n// usage accurately. For example, to prevent a feature from appearing to be\n// constantly `used` and then `unused` when switching between local projects.\n// To reiterate,\n// we **never** can read your actual git remote. The value is hashed one-way\n// with random salt data, making it impossible for us to reverse or try to\n// guess the remote by re-computing hashes.\n\n\nfunction _getProjectIdByGit() {\n  try {\n    const originBuffer = (0, _childProcess).execSync(`git config --local --get remote.origin.url`, {\n      timeout: 1000,\n      stdio: `pipe`\n    });\n    return String(originBuffer).trim();\n  } catch (_) {\n    return null;\n  }\n}\n\nfunction getRawProjectId() {\n  return _getProjectIdByGit() || process.env.REPOSITORY_URL || process.cwd();\n}","map":{"version":3,"sources":["../../telemetry/project-id.ts"],"names":[],"mappings":";;;;;QA6BgB,e,GAAA,e;;AA7BS,IAAA,aAAe,GAAA,OAAA,CAAA,eAAA,CAAf,C,CAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SAES,kB,GAAqB;MACxB;AACF,UAAM,YAAY,GAAA,CAAA,GAfG,aAeH,EAfkB,QAelB,CACf,4CADe,EAC2B;AAEzC,MAAA,OAAO,EAAE,IAFgC;AAGzC,MAAA,KAAK,EAAG;AAHiC,KAD3B,CAAlB;WAQO,MAAM,CAAC,YAAD,CAAN,CAAqB,IAArB,E;AACR,G,CAAA,OAAQ,CAAR,EAAW;WACH,I;AACR;AACF;;SAEe,e,GAA0B;SACjC,kBAAkB,MAAM,OAAO,CAAC,GAAR,CAAY,cAApC,IAAsD,OAAO,CAAC,GAAR,E;AAC9D","sourcesContent":["import { execSync } from 'child_process'\n\n// Q: Why does Next.js need a project ID? Why is it looking at my git remote?\n// A:\n// Next.js' telemetry is and always will be completely anonymous. Because of\n// this, we need a way to differentiate different projects to track feature\n// usage accurately. For example, to prevent a feature from appearing to be\n// constantly `used` and then `unused` when switching between local projects.\n// To reiterate,\n// we **never** can read your actual git remote. The value is hashed one-way\n// with random salt data, making it impossible for us to reverse or try to\n// guess the remote by re-computing hashes.\n\nfunction _getProjectIdByGit() {\n  try {\n    const originBuffer = execSync(\n      `git config --local --get remote.origin.url`,\n      {\n        timeout: 1000,\n        stdio: `pipe`,\n      }\n    )\n\n    return String(originBuffer).trim()\n  } catch (_) {\n    return null\n  }\n}\n\nexport function getRawProjectId(): string {\n  return _getProjectIdByGit() || process.env.REPOSITORY_URL || process.cwd()\n}\n"]},"metadata":{},"sourceType":"script"}