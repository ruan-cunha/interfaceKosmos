{"ast":null,"code":"const createSimplePreset = require('cssnano-preset-simple');\n\nmodule.exports = (opts = {}, postcss = require('postcss')) => {\n  const excludeAll = Boolean(opts && opts.excludeAll);\n  const userOpts = Object.assign({}, opts);\n\n  if (excludeAll) {\n    for (const userOption in userOpts) {\n      if (!userOpts.hasOwnProperty(userOption)) continue;\n      const val = userOpts[userOption];\n\n      if (!Boolean(val)) {\n        continue;\n      }\n\n      if (Object.prototype.toString.call(val) === '[object Object]') {\n        userOpts[userOption] = Object.assign({}, {\n          exclude: false\n        }, val);\n      }\n    }\n  }\n\n  const options = Object.assign({}, excludeAll ? {\n    rawCache: true\n  } : undefined, userOpts);\n  const plugins = [];\n  createSimplePreset(options).plugins.forEach(plugin => {\n    if (Array.isArray(plugin)) {\n      const [processor, opts] = plugin;\n      const isEnabled = // No options:\n      !excludeAll && typeof opts === 'undefined' || typeof opts === 'boolean' && opts || !excludeAll && opts && typeof opts === 'object' && !opts.exclude || excludeAll && opts && typeof opts === 'object' && opts.exclude === false;\n\n      if (isEnabled) {\n        plugins.push(processor(opts));\n      }\n    } else {\n      plugins.push(plugin);\n    }\n  });\n  return postcss(plugins);\n};\n\nmodule.exports.postcss = true;","map":{"version":3,"sources":["C:/xampp/public_html/vamo/interface2/node_modules/cssnano-simple/src/index.js"],"names":["createSimplePreset","require","module","exports","opts","postcss","excludeAll","Boolean","userOpts","Object","assign","userOption","hasOwnProperty","val","prototype","toString","call","exclude","options","rawCache","undefined","plugins","forEach","plugin","Array","isArray","processor","isEnabled","push"],"mappings":"AAAA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,uBAAD,CAAlC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAI,GAAG,EAAR,EAAYC,OAAO,GAAGJ,OAAO,CAAC,SAAD,CAA7B,KAA6C;AAC5D,QAAMK,UAAU,GAAGC,OAAO,CAACH,IAAI,IAAIA,IAAI,CAACE,UAAd,CAA1B;AAEA,QAAME,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,IAAlB,CAAjB;;AACA,MAAIE,UAAJ,EAAgB;AACd,SAAK,MAAMK,UAAX,IAAyBH,QAAzB,EAAmC;AACjC,UAAI,CAACA,QAAQ,CAACI,cAAT,CAAwBD,UAAxB,CAAL,EAA0C;AAC1C,YAAME,GAAG,GAAGL,QAAQ,CAACG,UAAD,CAApB;;AACA,UAAI,CAACJ,OAAO,CAACM,GAAD,CAAZ,EAAmB;AACjB;AACD;;AAED,UAAIJ,MAAM,CAACK,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BH,GAA/B,MAAwC,iBAA5C,EAA+D;AAC7DL,QAAAA,QAAQ,CAACG,UAAD,CAAR,GAAuBF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEO,UAAAA,OAAO,EAAE;AAAX,SAAlB,EAAsCJ,GAAtC,CAAvB;AACD;AACF;AACF;;AAED,QAAMK,OAAO,GAAGT,MAAM,CAACC,MAAP,CACd,EADc,EAEdJ,UAAU,GAAG;AAAEa,IAAAA,QAAQ,EAAE;AAAZ,GAAH,GAAwBC,SAFpB,EAGdZ,QAHc,CAAhB;AAMA,QAAMa,OAAO,GAAG,EAAhB;AACArB,EAAAA,kBAAkB,CAACkB,OAAD,CAAlB,CAA4BG,OAA5B,CAAoCC,OAApC,CAA6CC,MAAD,IAAY;AACtD,QAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,YAAM,CAACG,SAAD,EAAYtB,IAAZ,IAAoBmB,MAA1B;AAEA,YAAMI,SAAS,GACb;AACC,OAACrB,UAAD,IAAe,OAAOF,IAAP,KAAgB,WAAhC,IAEC,OAAOA,IAAP,KAAgB,SAAhB,IAA6BA,IAF9B,IAIC,CAACE,UAAD,IAAeF,IAAf,IAAuB,OAAOA,IAAP,KAAgB,QAAvC,IAAmD,CAACA,IAAI,CAACa,OAJ1D,IAMCX,UAAU,IACTF,IADD,IAEC,OAAOA,IAAP,KAAgB,QAFjB,IAGCA,IAAI,CAACa,OAAL,KAAiB,KAXrB;;AAaA,UAAIU,SAAJ,EAAe;AACbN,QAAAA,OAAO,CAACO,IAAR,CAAaF,SAAS,CAACtB,IAAD,CAAtB;AACD;AACF,KAnBD,MAmBO;AACLiB,MAAAA,OAAO,CAACO,IAAR,CAAaL,MAAb;AACD;AACF,GAvBD;AAyBA,SAAOlB,OAAO,CAACgB,OAAD,CAAd;AACD,CAnDD;;AAqDAnB,MAAM,CAACC,OAAP,CAAeE,OAAf,GAAyB,IAAzB","sourcesContent":["const createSimplePreset = require('cssnano-preset-simple');\n\nmodule.exports = (opts = {}, postcss = require('postcss')) => {\n  const excludeAll = Boolean(opts && opts.excludeAll);\n\n  const userOpts = Object.assign({}, opts);\n  if (excludeAll) {\n    for (const userOption in userOpts) {\n      if (!userOpts.hasOwnProperty(userOption)) continue;\n      const val = userOpts[userOption];\n      if (!Boolean(val)) {\n        continue;\n      }\n\n      if (Object.prototype.toString.call(val) === '[object Object]') {\n        userOpts[userOption] = Object.assign({}, { exclude: false }, val);\n      }\n    }\n  }\n\n  const options = Object.assign(\n    {},\n    excludeAll ? { rawCache: true } : undefined,\n    userOpts\n  );\n\n  const plugins = [];\n  createSimplePreset(options).plugins.forEach((plugin) => {\n    if (Array.isArray(plugin)) {\n      const [processor, opts] = plugin;\n\n      const isEnabled =\n        // No options:\n        (!excludeAll && typeof opts === 'undefined') ||\n        // Short-hand enabled:\n        (typeof opts === 'boolean' && opts) ||\n        // Include all plugins:\n        (!excludeAll && opts && typeof opts === 'object' && !opts.exclude) ||\n        // Exclude all plugins:\n        (excludeAll &&\n          opts &&\n          typeof opts === 'object' &&\n          opts.exclude === false);\n\n      if (isEnabled) {\n        plugins.push(processor(opts));\n      }\n    } else {\n      plugins.push(plugin);\n    }\n  });\n\n  return postcss(plugins);\n};\n\nmodule.exports.postcss = true;\n"]},"metadata":{},"sourceType":"script"}