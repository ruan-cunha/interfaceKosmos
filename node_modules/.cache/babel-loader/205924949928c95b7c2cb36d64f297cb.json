{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass WebpackHotMiddleware {\n  constructor(compilers) {\n    this.onServerInvalid = () => {\n      if (!this.serverError) return;\n      this.serverError = false;\n\n      if (this.clientLatestStats) {\n        this.latestStats = this.clientLatestStats;\n        this.publishStats('built', this.latestStats);\n      }\n    };\n\n    this.onClientInvalid = () => {\n      if (this.closed || this.serverError) return;\n      this.latestStats = null;\n      this.eventStream.publish({\n        action: 'building'\n      });\n    };\n\n    this.onServerDone = statsResult => {\n      if (this.closed) return; // Keep hold of latest stats so they can be propagated to new clients\n      // this.latestStats = statsResult\n      // this.publishStats('built', this.latestStats)\n\n      this.serverError = statsResult.hasErrors();\n\n      if (this.serverError) {\n        this.latestStats = statsResult;\n        this.publishStats('built', this.latestStats);\n      }\n    };\n\n    this.onClientDone = statsResult => {\n      this.clientLatestStats = statsResult;\n      if (this.closed || this.serverError) return; // Keep hold of latest stats so they can be propagated to new clients\n\n      this.latestStats = statsResult;\n      this.publishStats('built', this.latestStats);\n    };\n\n    this.middleware = (req, res, next) => {\n      var ref;\n      if (this.closed) return next();\n      if (!((ref = req.url) === null || ref === void 0 ? void 0 : ref.startsWith('/_next/webpack-hmr'))) return next();\n      this.eventStream.handler(req, res);\n\n      if (this.latestStats) {\n        // Explicitly not passing in `log` fn as we don't want to log again on\n        // the server\n        this.publishStats('sync', this.latestStats);\n      }\n    };\n\n    this.publishStats = (action, statsResult) => {\n      const stats = statsResult.toJson({\n        all: false,\n        hash: true,\n        warnings: true,\n        errors: true\n      });\n      this.eventStream.publish({\n        action: action,\n        hash: stats.hash,\n        warnings: stats.warnings || [],\n        errors: stats.errors || []\n      });\n    };\n\n    this.publish = payload => {\n      if (this.closed) return;\n      this.eventStream.publish(payload);\n    };\n\n    this.close = () => {\n      if (this.closed) return; // Can't remove compiler plugins, so we just set a flag and noop if closed\n      // https://github.com/webpack/tapable/issues/32#issuecomment-350644466\n\n      this.closed = true;\n      this.eventStream.close();\n    };\n\n    this.eventStream = new EventStream();\n    this.latestStats = null;\n    this.clientLatestStats = null;\n    this.serverError = false;\n    this.closed = false;\n    compilers[0].hooks.invalid.tap('webpack-hot-middleware', this.onClientInvalid);\n    compilers[0].hooks.done.tap('webpack-hot-middleware', this.onClientDone);\n    compilers[1].hooks.invalid.tap('webpack-hot-middleware', this.onServerInvalid);\n    compilers[1].hooks.done.tap('webpack-hot-middleware', this.onServerDone);\n  }\n\n}\n\nexports.WebpackHotMiddleware = WebpackHotMiddleware;\n\nclass EventStream {\n  constructor() {\n    this.heartbeatTick = () => {\n      this.everyClient(client => {\n        client.write('data: \\ud83d\\udc93\\n\\n');\n      });\n    };\n\n    this.clients = new Set();\n    this.interval = setInterval(this.heartbeatTick, 2500).unref();\n  }\n\n  everyClient(fn) {\n    for (const client of this.clients) {\n      fn(client);\n    }\n  }\n\n  close() {\n    clearInterval(this.interval);\n    this.everyClient(client => {\n      if (!client.finished) client.end();\n    });\n    this.clients.clear();\n  }\n\n  handler(req, res) {\n    const headers = {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'text/event-stream;charset=utf-8',\n      'Cache-Control': 'no-cache, no-transform',\n      // While behind nginx, event stream should not be buffered:\n      // http://nginx.org/docs/http/ngx_http_proxy_module.html#proxy_buffering\n      'X-Accel-Buffering': 'no'\n    };\n    const isHttp1 = !(parseInt(req.httpVersion) >= 2);\n\n    if (isHttp1) {\n      req.socket.setKeepAlive(true);\n      Object.assign(headers, {\n        Connection: 'keep-alive'\n      });\n    }\n\n    res.writeHead(200, headers);\n    res.write('\\n');\n    this.clients.add(res);\n    req.on('close', () => {\n      if (!res.finished) res.end();\n      this.clients.delete(res);\n    });\n  }\n\n  publish(payload) {\n    this.everyClient(client => {\n      client.write('data: ' + JSON.stringify(payload) + '\\n\\n');\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../server/dev/hot-middleware.ts"],"names":[],"mappings":"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","sourcesContent":["// Based on https://github.com/webpack-contrib/webpack-hot-middleware/blob/9708d781ae0e46179cf8ea1a94719de4679aaf53/middleware.js\n// Included License below\n\n// Copyright JS Foundation and other contributors\n\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// 'Software'), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport { webpack } from 'next/dist/compiled/webpack/webpack'\nimport http from 'http'\n\nexport class WebpackHotMiddleware {\n  eventStream: EventStream\n  latestStats: webpack.Stats | null\n  clientLatestStats: webpack.Stats | null\n  closed: boolean\n  serverError: boolean\n\n  constructor(compilers: webpack.Compiler[]) {\n    this.eventStream = new EventStream()\n    this.latestStats = null\n    this.clientLatestStats = null\n    this.serverError = false\n    this.closed = false\n\n    compilers[0].hooks.invalid.tap(\n      'webpack-hot-middleware',\n      this.onClientInvalid\n    )\n    compilers[0].hooks.done.tap('webpack-hot-middleware', this.onClientDone)\n\n    compilers[1].hooks.invalid.tap(\n      'webpack-hot-middleware',\n      this.onServerInvalid\n    )\n    compilers[1].hooks.done.tap('webpack-hot-middleware', this.onServerDone)\n  }\n\n  onServerInvalid = () => {\n    if (!this.serverError) return\n\n    this.serverError = false\n\n    if (this.clientLatestStats) {\n      this.latestStats = this.clientLatestStats\n      this.publishStats('built', this.latestStats)\n    }\n  }\n  onClientInvalid = () => {\n    if (this.closed || this.serverError) return\n    this.latestStats = null\n    this.eventStream.publish({ action: 'building' })\n  }\n  onServerDone = (statsResult: webpack.Stats) => {\n    if (this.closed) return\n    // Keep hold of latest stats so they can be propagated to new clients\n    // this.latestStats = statsResult\n    // this.publishStats('built', this.latestStats)\n    this.serverError = statsResult.hasErrors()\n\n    if (this.serverError) {\n      this.latestStats = statsResult\n      this.publishStats('built', this.latestStats)\n    }\n  }\n  onClientDone = (statsResult: webpack.Stats) => {\n    this.clientLatestStats = statsResult\n\n    if (this.closed || this.serverError) return\n    // Keep hold of latest stats so they can be propagated to new clients\n    this.latestStats = statsResult\n    this.publishStats('built', this.latestStats)\n  }\n  middleware = (\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: () => void\n  ) => {\n    if (this.closed) return next()\n    if (!req.url?.startsWith('/_next/webpack-hmr')) return next()\n    this.eventStream.handler(req, res)\n    if (this.latestStats) {\n      // Explicitly not passing in `log` fn as we don't want to log again on\n      // the server\n      this.publishStats('sync', this.latestStats)\n    }\n  }\n\n  publishStats = (action: string, statsResult: webpack.Stats) => {\n    const stats = statsResult.toJson({\n      all: false,\n      hash: true,\n      warnings: true,\n      errors: true,\n    })\n\n    this.eventStream.publish({\n      action: action,\n      hash: stats.hash,\n      warnings: stats.warnings || [],\n      errors: stats.errors || [],\n    })\n  }\n\n  publish = (payload: any) => {\n    if (this.closed) return\n    this.eventStream.publish(payload)\n  }\n  close = () => {\n    if (this.closed) return\n    // Can't remove compiler plugins, so we just set a flag and noop if closed\n    // https://github.com/webpack/tapable/issues/32#issuecomment-350644466\n    this.closed = true\n    this.eventStream.close()\n  }\n}\n\nclass EventStream {\n  clients: Set<http.ServerResponse>\n  interval: NodeJS.Timeout\n  constructor() {\n    this.clients = new Set()\n\n    this.interval = setInterval(this.heartbeatTick, 2500).unref()\n  }\n\n  heartbeatTick = () => {\n    this.everyClient((client) => {\n      client.write('data: \\uD83D\\uDC93\\n\\n')\n    })\n  }\n\n  everyClient(fn: (client: http.ServerResponse) => void) {\n    for (const client of this.clients) {\n      fn(client)\n    }\n  }\n\n  close() {\n    clearInterval(this.interval)\n    this.everyClient((client) => {\n      if (!client.finished) client.end()\n    })\n    this.clients.clear()\n  }\n\n  handler(req: http.IncomingMessage, res: http.ServerResponse) {\n    const headers = {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'text/event-stream;charset=utf-8',\n      'Cache-Control': 'no-cache, no-transform',\n      // While behind nginx, event stream should not be buffered:\n      // http://nginx.org/docs/http/ngx_http_proxy_module.html#proxy_buffering\n      'X-Accel-Buffering': 'no',\n    }\n\n    const isHttp1 = !(parseInt(req.httpVersion) >= 2)\n    if (isHttp1) {\n      req.socket.setKeepAlive(true)\n      Object.assign(headers, {\n        Connection: 'keep-alive',\n      })\n    }\n\n    res.writeHead(200, headers)\n    res.write('\\n')\n    this.clients.add(res)\n    req.on('close', () => {\n      if (!res.finished) res.end()\n      this.clients.delete(res)\n    })\n  }\n\n  publish(payload: any) {\n    this.everyClient((client) => {\n      client.write('data: ' + JSON.stringify(payload) + '\\n\\n')\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}