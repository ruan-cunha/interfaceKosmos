{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pageNotFoundError = pageNotFoundError;\nexports.getPagePath = getPagePath;\nexports.requirePage = requirePage;\nexports.requireFontManifest = requireFontManifest;\n\nvar _fs = require(\"fs\");\n\nvar _path = require(\"path\");\n\nvar _constants = require(\"../shared/lib/constants\");\n\nvar _normalizePagePath = require(\"./normalize-page-path\");\n\nvar _normalizeLocalePath = require(\"../shared/lib/i18n/normalize-locale-path\");\n\nfunction pageNotFoundError(page) {\n  const err = new Error(`Cannot find module for page: ${page}`);\n  err.code = 'ENOENT';\n  return err;\n}\n\nfunction getPagePath(page, distDir, serverless, dev, locales) {\n  const serverBuildPath = (0, _path).join(distDir, serverless && !dev ? _constants.SERVERLESS_DIRECTORY : _constants.SERVER_DIRECTORY);\n\n  const pagesManifest = require((0, _path).join(serverBuildPath, _constants.PAGES_MANIFEST));\n\n  try {\n    page = (0, _normalizePagePath).denormalizePagePath((0, _normalizePagePath).normalizePagePath(page));\n  } catch (err) {\n    console.error(err);\n    throw pageNotFoundError(page);\n  }\n\n  let pagePath = pagesManifest[page];\n\n  if (!pagesManifest[page] && locales) {\n    const manifestNoLocales = {};\n\n    for (const key of Object.keys(pagesManifest)) {\n      manifestNoLocales[(0, _normalizeLocalePath).normalizeLocalePath(key, locales).pathname] = pagesManifest[key];\n    }\n\n    pagePath = manifestNoLocales[page];\n  }\n\n  if (!pagePath) {\n    throw pageNotFoundError(page);\n  }\n\n  return (0, _path).join(serverBuildPath, pagePath);\n}\n\nfunction requirePage(page, distDir, serverless) {\n  const pagePath = getPagePath(page, distDir, serverless);\n\n  if (pagePath.endsWith('.html')) {\n    return _fs.promises.readFile(pagePath, 'utf8');\n  }\n\n  return require(pagePath);\n}\n\nfunction requireFontManifest(distDir, serverless) {\n  const serverBuildPath = (0, _path).join(distDir, serverless ? _constants.SERVERLESS_DIRECTORY : _constants.SERVER_DIRECTORY);\n\n  const fontManifest = require((0, _path).join(serverBuildPath, _constants.FONT_MANIFEST));\n\n  return fontManifest;\n}","map":{"version":3,"sources":["../../server/require.ts"],"names":[],"mappings":";;;;;QAYgB,iB,GAAA,iB;QAMA,W,GAAA,W;QAwCA,W,GAAA,W;QAYA,mB,GAAA,mB;;AAtES,IAAA,GAAI,GAAA,OAAA,CAAA,IAAA,CAAJ;;AACJ,IAAA,KAAM,GAAA,OAAA,CAAA,MAAA,CAAN;;AAMd,IAAA,UAAyB,GAAA,OAAA,CAAA,yBAAA,CAAzB;;AACgD,IAAA,kBAAuB,GAAA,OAAA,CAAA,uBAAA,CAAvB;;AAEnB,IAAA,oBAA0C,GAAA,OAAA,CAAA,0CAAA,CAA1C;;SAEpB,iB,CAAkB,I,EAAqB;AACrD,QAAM,GAAG,GAAQ,IAAI,KAAJ,CAAW,gCAA+B,IAAI,EAA9C,CAAjB;AACA,EAAA,GAAG,CAAC,IAAJ,GAAQ,QAAR;SACO,G;AACR;;SAEe,W,CACd,I,EACA,O,EACA,U,EACA,G,EACA,O,EACQ;AACR,QAAM,eAAe,GAAA,CAAA,GAxBF,KAwBE,EAxBI,IAwBJ,CACnB,OADmB,EAEnB,UAAU,IAAA,CAAK,GAAf,GApBG,UAAyB,CAAA,oBAoB5B,GApBG,UAAyB,CAAA,gBAkBT,CAArB;;AAIA,QAAM,aAAa,GAAG,OAAO,CAAA,CAAA,GA5BV,KA4BU,EA5BJ,IA4BI,CAC3B,eAD2B,EAtBxB,UAAyB,CAAA,cAsBD,CAAA,CAA7B;;MAKI;AACF,IAAA,IAAI,GAAA,CAAA,GA3B+C,kBA2B/C,EA3BsE,mBA2BtE,CA3BsE,CAAA,GAAvB,kBAAuB,EAAA,iBAAA,CA2B7B,IA3B6B,CA2BtE,CAAJ;AACD,G,CAAA,OAAQ,GAAR,EAAa;AACZ,IAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA,UAAM,iBAAiB,CAAC,IAAD,CAAvB;AACD;;AACD,MAAI,QAAQ,GAAG,aAAa,CAAC,IAAD,CAA5B;;AAEA,MAAE,CAAG,aAAa,CAAC,IAAD,CAAhB,IAA0B,OAA5B,EAAqC;AACnC,UAAM,iBAAiB,GAAA,EAAvB;;SAEK,MAAM,G,IAAO,MAAM,CAAC,IAAP,CAAY,aAAZ,C,EAA4B;AAC5C,MAAA,iBAAiB,CAAA,CAAA,GApCa,oBAoCb,EApCuD,mBAoCvD,CAAqB,GAArB,EAA0B,OAA1B,EAAmC,QAAnC,CAAjB,GACE,aAAa,CAAC,GAAD,CADf;AAED;;AACD,IAAA,QAAQ,GAAG,iBAAiB,CAAC,IAAD,CAA5B;AACD;;AAED,MAAE,CAAG,QAAL,EAAe;AACb,UAAM,iBAAiB,CAAC,IAAD,CAAvB;AACD;;aArDkB,K,EAAM,I,CAsDb,e,EAAiB,Q;AAC9B;;SAEe,W,CACd,I,EACA,O,EACA,U,EACK;AACL,QAAM,QAAQ,GAAG,WAAW,CAAC,IAAD,EAAO,OAAP,EAAgB,UAAhB,CAA5B;;AACA,MAAI,QAAQ,CAAC,QAAT,CAAiB,OAAjB,CAAJ,EAAgC;WAhET,GAAI,CAAA,QAAJ,CAiEL,QAjEK,CAiEI,QAjEJ,EAiEY,MAjEZ,C;AAkEtB;;SACM,OAAO,CAAC,QAAD,C;AACf;;SAEe,mB,CAAoB,O,EAAiB,U,EAAqB;AACxE,QAAM,eAAe,GAAA,CAAA,GAtEF,KAsEE,EAtEI,IAsEJ,CACnB,OADmB,EAEnB,UAAU,GAlEP,UAAyB,CAAA,oBAkElB,GAlEP,UAAyB,CAAA,gBAgET,CAArB;;AAIA,QAAM,YAAY,GAAG,OAAO,CAAA,CAAA,GA1ET,KA0ES,EA1EH,IA0EG,CAAM,eAAN,EApEvB,UAAyB,CAAA,aAoEF,CAAA,CAA5B;;SACO,Y;AACR","sourcesContent":["import { promises } from 'fs'\nimport { join } from 'path'\nimport {\n  PAGES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVERLESS_DIRECTORY,\n  FONT_MANIFEST,\n} from '../shared/lib/constants'\nimport { normalizePagePath, denormalizePagePath } from './normalize-page-path'\nimport { PagesManifest } from '../build/webpack/plugins/pages-manifest-plugin'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\n\nexport function pageNotFoundError(page: string): Error {\n  const err: any = new Error(`Cannot find module for page: ${page}`)\n  err.code = 'ENOENT'\n  return err\n}\n\nexport function getPagePath(\n  page: string,\n  distDir: string,\n  serverless: boolean,\n  dev?: boolean,\n  locales?: string[]\n): string {\n  const serverBuildPath = join(\n    distDir,\n    serverless && !dev ? SERVERLESS_DIRECTORY : SERVER_DIRECTORY\n  )\n  const pagesManifest = require(join(\n    serverBuildPath,\n    PAGES_MANIFEST\n  )) as PagesManifest\n\n  try {\n    page = denormalizePagePath(normalizePagePath(page))\n  } catch (err) {\n    console.error(err)\n    throw pageNotFoundError(page)\n  }\n  let pagePath = pagesManifest[page]\n\n  if (!pagesManifest[page] && locales) {\n    const manifestNoLocales: typeof pagesManifest = {}\n\n    for (const key of Object.keys(pagesManifest)) {\n      manifestNoLocales[normalizeLocalePath(key, locales).pathname] =\n        pagesManifest[key]\n    }\n    pagePath = manifestNoLocales[page]\n  }\n\n  if (!pagePath) {\n    throw pageNotFoundError(page)\n  }\n  return join(serverBuildPath, pagePath)\n}\n\nexport function requirePage(\n  page: string,\n  distDir: string,\n  serverless: boolean\n): any {\n  const pagePath = getPagePath(page, distDir, serverless)\n  if (pagePath.endsWith('.html')) {\n    return promises.readFile(pagePath, 'utf8')\n  }\n  return require(pagePath)\n}\n\nexport function requireFontManifest(distDir: string, serverless: boolean) {\n  const serverBuildPath = join(\n    distDir,\n    serverless ? SERVERLESS_DIRECTORY : SERVER_DIRECTORY\n  )\n  const fontManifest = require(join(serverBuildPath, FONT_MANIFEST))\n  return fontManifest\n}\n"]},"metadata":{},"sourceType":"script"}