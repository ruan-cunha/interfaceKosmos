{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._postPayload = _postPayload;\n\nvar _asyncRetry = _interopRequireDefault(require(\"next/dist/compiled/async-retry\"));\n\nvar _nodeFetch = _interopRequireDefault(require(\"node-fetch\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _postPayload(endpoint, body) {\n  return (0, _asyncRetry).default(() => (0, _nodeFetch).default(endpoint, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'content-type': 'application/json'\n    },\n    timeout: 5000\n  }).then(res => {\n    if (!res.ok) {\n      const err = new Error(res.statusText);\n      err.response = res;\n      throw err;\n    }\n  }), {\n    minTimeout: 500,\n    retries: 1,\n    factor: 1\n  }).catch(() => {// We swallow errors when telemetry cannot be sent\n  }) // Ensure promise is voided\n  .then(() => {}, () => {});\n}","map":{"version":3,"sources":["../../telemetry/post-payload.ts"],"names":[],"mappings":";;;;;QAGgB,Y,GAAA,Y;;AAHE,IAAA,WAAgC,GAAA,sBAAA,CAAA,OAAA,CAAA,gCAAA,CAAA,CAAhC;;AACA,IAAA,UAAY,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAZ;;;;;;;;SAEF,Y,CAAa,Q,EAAkB,I,EAAc;aAH3C,W,EAAgC,O,CAAA,MAAA,CAAA,GAChC,UADgC,EACpB,OADoB,CAOpC,QAPoC,EAO5B;AACZ,IAAA,MAAM,EAAA,MADM;AAEZ,IAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,IAAf,CAFM;AAGZ,IAAA,OAAO,EAAA;AAAI,sBAAc;AAAlB,KAHK;AAIZ,IAAA,OAAO,EAAE;AAJG,GAP4B,EAYvC,IAZuC,CAYjC,GAAF,IAAU;AACf,QAAE,CAAG,GAAG,CAAC,EAAT,EAAa;AACX,YAAM,GAAG,GAAG,IAAI,KAAJ,CAAU,GAAG,CAAC,UAAd,CAAZ;AACE,MAAA,GAAG,CAAS,QAAZ,GAAuB,GAAvB;AACF,YAAM,GAAN;AACD;AACF,GAlByC,C;AAmB1C,IAAA,UAAU,EAAE,G;AAAK,IAAA,OAAO,EAAE,C;AAAG,IAAA,MAAM,EAAE;KAEtC,K,CAAK,MAAO,CACX;AACD,G,EACD;GACC,I,CAAI,MACG,CAAE,C,EAAA,MACF,CAAE,C;AAGf","sourcesContent":["import retry from 'next/dist/compiled/async-retry'\nimport fetch from 'node-fetch'\n\nexport function _postPayload(endpoint: string, body: object) {\n  return (\n    retry(\n      () =>\n        fetch(endpoint, {\n          method: 'POST',\n          body: JSON.stringify(body),\n          headers: { 'content-type': 'application/json' },\n          timeout: 5000,\n        }).then((res) => {\n          if (!res.ok) {\n            const err = new Error(res.statusText)\n            ;(err as any).response = res\n            throw err\n          }\n        }),\n      { minTimeout: 500, retries: 1, factor: 1 }\n    )\n      .catch(() => {\n        // We swallow errors when telemetry cannot be sent\n      })\n      // Ensure promise is voided\n      .then(\n        () => {},\n        () => {}\n      )\n  )\n}\n"]},"metadata":{},"sourceType":"script"}