{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSerializableProps = isSerializableProps;\nconst regexpPlainIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n\nfunction getObjectClassLabel(value) {\n  return Object.prototype.toString.call(value);\n}\n\nfunction isPlainObject(value) {\n  if (getObjectClassLabel(value) !== '[object Object]') {\n    return false;\n  }\n\n  const prototype = Object.getPrototypeOf(value);\n  return prototype === null || prototype === Object.prototype;\n}\n\nfunction isSerializableProps(page, method, input) {\n  if (!isPlainObject(input)) {\n    throw new SerializableError(page, method, '', `Props must be returned as a plain object from ${method}: \\`{ props: { ... } }\\` (received: \\`${getObjectClassLabel(input)}\\`).`);\n  }\n\n  function visit(visited, value, path) {\n    if (visited.has(value)) {\n      throw new SerializableError(page, method, path, `Circular references cannot be expressed in JSON (references: \\`${visited.get(value) || '(self)'}\\`).`);\n    }\n\n    visited.set(value, path);\n  }\n\n  function isSerializable(refs, value, path) {\n    const type = typeof value;\n\n    if ( // `null` can be serialized, but not `undefined`.\n    value === null || // n.b. `bigint`, `function`, `symbol`, and `undefined` cannot be\n    // serialized.\n    //\n    // `object` is special-cased below, as it may represent `null`, an Array,\n    // a plain object, a class, et al.\n    type === 'boolean' || type === 'number' || type === 'string') {\n      return true;\n    }\n\n    if (type === 'undefined') {\n      throw new SerializableError(page, method, path, '`undefined` cannot be serialized as JSON. Please use `null` or omit this value.');\n    }\n\n    if (isPlainObject(value)) {\n      visit(refs, value, path);\n\n      if (Object.entries(value).every(([key, nestedValue]) => {\n        const nextPath = regexpPlainIdentifier.test(key) ? `${path}.${key}` : `${path}[${JSON.stringify(key)}]`;\n        const newRefs = new Map(refs);\n        return isSerializable(newRefs, key, nextPath) && isSerializable(newRefs, nestedValue, nextPath);\n      })) {\n        return true;\n      }\n\n      throw new SerializableError(page, method, path, `invariant: Unknown error encountered in Object.`);\n    }\n\n    if (Array.isArray(value)) {\n      visit(refs, value, path);\n\n      if (value.every((nestedValue, index) => {\n        const newRefs = new Map(refs);\n        return isSerializable(newRefs, nestedValue, `${path}[${index}]`);\n      })) {\n        return true;\n      }\n\n      throw new SerializableError(page, method, path, `invariant: Unknown error encountered in Array.`);\n    } // None of these can be expressed as JSON:\n    // const type: \"bigint\" | \"symbol\" | \"object\" | \"function\"\n\n\n    throw new SerializableError(page, method, path, '`' + type + '`' + (type === 'object' ? ` (\"${Object.prototype.toString.call(value)}\")` : '') + ' cannot be serialized as JSON. Please only return JSON serializable data types.');\n  }\n\n  return isSerializable(new Map(), input, '');\n}\n\nclass SerializableError extends Error {\n  constructor(page, method, path, message) {\n    super(path ? `Error serializing \\`${path}\\` returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}` : `Error serializing props returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}`);\n  }\n\n}\n\nexports.SerializableError = SerializableError;","map":{"version":3,"sources":["../../lib/is-serializable-props.ts"],"names":[],"mappings":"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","sourcesContent":["const regexpPlainIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/\n\nfunction getObjectClassLabel(value: any): string {\n  return Object.prototype.toString.call(value)\n}\n\nfunction isPlainObject(value: any): boolean {\n  if (getObjectClassLabel(value) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(value)\n  return prototype === null || prototype === Object.prototype\n}\n\nexport function isSerializableProps(\n  page: string,\n  method: string,\n  input: any\n): true {\n  if (!isPlainObject(input)) {\n    throw new SerializableError(\n      page,\n      method,\n      '',\n      `Props must be returned as a plain object from ${method}: \\`{ props: { ... } }\\` (received: \\`${getObjectClassLabel(\n        input\n      )}\\`).`\n    )\n  }\n\n  function visit(visited: Map<any, string>, value: any, path: string) {\n    if (visited.has(value)) {\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        `Circular references cannot be expressed in JSON (references: \\`${\n          visited.get(value) || '(self)'\n        }\\`).`\n      )\n    }\n\n    visited.set(value, path)\n  }\n\n  function isSerializable(\n    refs: Map<any, string>,\n    value: any,\n    path: string\n  ): true {\n    const type = typeof value\n    if (\n      // `null` can be serialized, but not `undefined`.\n      value === null ||\n      // n.b. `bigint`, `function`, `symbol`, and `undefined` cannot be\n      // serialized.\n      //\n      // `object` is special-cased below, as it may represent `null`, an Array,\n      // a plain object, a class, et al.\n      type === 'boolean' ||\n      type === 'number' ||\n      type === 'string'\n    ) {\n      return true\n    }\n\n    if (type === 'undefined') {\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        '`undefined` cannot be serialized as JSON. Please use `null` or omit this value.'\n      )\n    }\n\n    if (isPlainObject(value)) {\n      visit(refs, value, path)\n\n      if (\n        Object.entries(value).every(([key, nestedValue]) => {\n          const nextPath = regexpPlainIdentifier.test(key)\n            ? `${path}.${key}`\n            : `${path}[${JSON.stringify(key)}]`\n\n          const newRefs = new Map(refs)\n          return (\n            isSerializable(newRefs, key, nextPath) &&\n            isSerializable(newRefs, nestedValue, nextPath)\n          )\n        })\n      ) {\n        return true\n      }\n\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        `invariant: Unknown error encountered in Object.`\n      )\n    }\n\n    if (Array.isArray(value)) {\n      visit(refs, value, path)\n\n      if (\n        value.every((nestedValue, index) => {\n          const newRefs = new Map(refs)\n          return isSerializable(newRefs, nestedValue, `${path}[${index}]`)\n        })\n      ) {\n        return true\n      }\n\n      throw new SerializableError(\n        page,\n        method,\n        path,\n        `invariant: Unknown error encountered in Array.`\n      )\n    }\n\n    // None of these can be expressed as JSON:\n    // const type: \"bigint\" | \"symbol\" | \"object\" | \"function\"\n    throw new SerializableError(\n      page,\n      method,\n      path,\n      '`' +\n        type +\n        '`' +\n        (type === 'object'\n          ? ` (\"${Object.prototype.toString.call(value)}\")`\n          : '') +\n        ' cannot be serialized as JSON. Please only return JSON serializable data types.'\n    )\n  }\n\n  return isSerializable(new Map(), input, '')\n}\n\nexport class SerializableError extends Error {\n  constructor(page: string, method: string, path: string, message: string) {\n    super(\n      path\n        ? `Error serializing \\`${path}\\` returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}`\n        : `Error serializing props returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}`\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}