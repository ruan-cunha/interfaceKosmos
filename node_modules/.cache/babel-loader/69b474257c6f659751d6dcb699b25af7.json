{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocaleMetadata = getLocaleMetadata;\n\nvar _accept = _interopRequireDefault(require(\"@hapi/accept\"));\n\nvar _denormalizePagePath = require(\"../../../server/denormalize-page-path\");\n\nvar _detectDomainLocale = require(\"./detect-domain-locale\");\n\nvar _formatUrl = require(\"../router/utils/format-url\");\n\nvar _normalizeLocalePath = require(\"./normalize-locale-path\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getLocaleMetadata(params) {\n  const {\n    i18n\n  } = params.nextConfig;\n  const {\n    cookies,\n    headers,\n    nextConfig,\n    url\n  } = params;\n  const path = (0, _normalizeLocalePath).normalizeLocalePath(url.pathname, i18n.locales);\n  const domain = (0, _detectDomainLocale).detectDomainLocale(i18n.domains, getHostname(url, headers));\n  const defaultLocale = (domain === null || domain === void 0 ? void 0 : domain.defaultLocale) || i18n.defaultLocale;\n  const preferredLocale = getAcceptPreferredLocale(i18n, headers);\n  return {\n    path,\n    domain,\n    defaultLocale,\n    locale: (path === null || path === void 0 ? void 0 : path.detectedLocale) || defaultLocale,\n    redirect: getRedirect({\n      locale: {\n        preferred: preferredLocale,\n        default: defaultLocale,\n        detected: (path === null || path === void 0 ? void 0 : path.detectedLocale) || (domain === null || domain === void 0 ? void 0 : domain.defaultLocale) || getLocaleFromCookie(i18n, cookies) || preferredLocale || i18n.defaultLocale\n      },\n      domain,\n      nextConfig,\n      url\n    }),\n    trailingSlash: url.pathname !== '/' ? url.pathname.endsWith('/') : nextConfig.trailingSlash\n  };\n}\n\nfunction getLocaleFromCookie(i18n, cookies) {\n  var ref, ref1;\n  const nextLocale = (ref = cookies()) === null || ref === void 0 ? void 0 : (ref1 = ref.NEXT_LOCALE) === null || ref1 === void 0 ? void 0 : ref1.toLowerCase();\n  return nextLocale ? i18n.locales.find(locale => nextLocale === locale.toLowerCase()) : undefined;\n}\n\nfunction getAcceptPreferredLocale(i18n, headers) {\n  const value = headers === null || headers === void 0 ? void 0 : headers['accept-language'];\n\n  if (i18n.localeDetection !== false && value && !Array.isArray(value)) {\n    try {\n      return _accept.default.language(value, i18n.locales);\n    } catch (err) {}\n  }\n}\n\nfunction getHostname(parsed, headers) {\n  var ref;\n  return (ref = !Array.isArray(headers === null || headers === void 0 ? void 0 : headers.host) && (headers === null || headers === void 0 ? void 0 : headers.host) || parsed.hostname) === null || ref === void 0 ? void 0 : ref.split(':')[0].toLowerCase();\n}\n\nfunction getRedirect({\n  domain,\n  locale,\n  nextConfig,\n  url\n}) {\n  const isRootPath = (0, _denormalizePagePath).denormalizePagePath(url.pathname) === '/';\n\n  if (nextConfig.i18n.localeDetection !== false && isRootPath) {\n    const preferredDomain = (0, _detectDomainLocale).detectDomainLocale(nextConfig.i18n.domains, undefined, locale.preferred);\n\n    if (domain && preferredDomain) {\n      const isPDomain = preferredDomain.domain === domain.domain;\n      const isPLocale = preferredDomain.defaultLocale === locale.preferred;\n\n      if (!isPDomain || !isPLocale) {\n        const scheme = `http${preferredDomain.http ? '' : 's'}`;\n        const rlocale = isPLocale ? '' : locale.preferred;\n        return `${scheme}://${preferredDomain.domain}/${rlocale}`;\n      }\n    }\n\n    if (locale.detected.toLowerCase() !== locale.default.toLowerCase()) {\n      return (0, _formatUrl).formatUrl({ ...url,\n        pathname: `${nextConfig.basePath || ''}/${locale.detected}`\n      });\n    }\n  }\n}","map":{"version":3,"sources":["../../../../shared/lib/i18n/get-locale-metadata.ts"],"names":[],"mappings":"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","sourcesContent":["import accept from '@hapi/accept'\nimport { denormalizePagePath } from '../../../server/denormalize-page-path'\nimport { detectDomainLocale } from './detect-domain-locale'\nimport { formatUrl } from '../router/utils/format-url'\nimport { normalizeLocalePath } from './normalize-locale-path'\nimport type { I18NConfig, DomainLocale } from '../../../server/config-shared'\n\ninterface Params {\n  cookies(): { [key: string]: string }\n  headers?: { [key: string]: string | string[] | undefined }\n  nextConfig: { basePath?: string; i18n: I18NConfig; trailingSlash?: boolean }\n  url: { hostname?: string | null; pathname: string }\n}\n\nexport function getLocaleMetadata(params: Params) {\n  const { i18n } = params.nextConfig\n  const { cookies, headers, nextConfig, url } = params\n  const path = normalizeLocalePath(url.pathname, i18n.locales)\n  const domain = detectDomainLocale(i18n.domains, getHostname(url, headers))\n  const defaultLocale = domain?.defaultLocale || i18n.defaultLocale\n  const preferredLocale = getAcceptPreferredLocale(i18n, headers)\n  return {\n    path,\n    domain,\n    defaultLocale,\n    locale: path?.detectedLocale || defaultLocale,\n    redirect: getRedirect({\n      locale: {\n        preferred: preferredLocale,\n        default: defaultLocale,\n        detected:\n          path?.detectedLocale ||\n          domain?.defaultLocale ||\n          getLocaleFromCookie(i18n, cookies) ||\n          preferredLocale ||\n          i18n.defaultLocale,\n      },\n      domain,\n      nextConfig,\n      url,\n    }),\n    trailingSlash:\n      url.pathname !== '/'\n        ? url.pathname.endsWith('/')\n        : nextConfig.trailingSlash,\n  }\n}\n\nfunction getLocaleFromCookie(\n  i18n: I18NConfig,\n  cookies: () => { [key: string]: string }\n) {\n  const nextLocale = cookies()?.NEXT_LOCALE?.toLowerCase()\n  return nextLocale\n    ? i18n.locales.find((locale) => nextLocale === locale.toLowerCase())\n    : undefined\n}\n\nfunction getAcceptPreferredLocale(\n  i18n: I18NConfig,\n  headers?: { [key: string]: string | string[] | undefined }\n) {\n  const value = headers?.['accept-language']\n  if (i18n.localeDetection !== false && value && !Array.isArray(value)) {\n    try {\n      return accept.language(value, i18n.locales)\n    } catch (err) {}\n  }\n}\n\nfunction getHostname(\n  parsed: { hostname?: string | null },\n  headers?: { [key: string]: string | string[] | undefined }\n) {\n  return ((!Array.isArray(headers?.host) && headers?.host) || parsed.hostname)\n    ?.split(':')[0]\n    .toLowerCase()\n}\n\nfunction getRedirect({\n  domain,\n  locale,\n  nextConfig,\n  url,\n}: {\n  domain?: DomainLocale\n  locale: { default: string; detected: string; preferred?: string }\n  nextConfig: { basePath?: string; i18n: I18NConfig; trailingSlash?: boolean }\n  url: { hostname?: string | null; pathname: string }\n}) {\n  const isRootPath = denormalizePagePath(url.pathname) === '/'\n  if (nextConfig.i18n.localeDetection !== false && isRootPath) {\n    const preferredDomain = detectDomainLocale(\n      nextConfig.i18n.domains,\n      undefined,\n      locale.preferred\n    )\n\n    if (domain && preferredDomain) {\n      const isPDomain = preferredDomain.domain === domain.domain\n      const isPLocale = preferredDomain.defaultLocale === locale.preferred\n      if (!isPDomain || !isPLocale) {\n        const scheme = `http${preferredDomain.http ? '' : 's'}`\n        const rlocale = isPLocale ? '' : locale.preferred\n        return `${scheme}://${preferredDomain.domain}/${rlocale}`\n      }\n    }\n\n    if (locale.detected.toLowerCase() !== locale.default.toLowerCase()) {\n      return formatUrl({\n        ...url,\n        pathname: `${nextConfig.basePath || ''}/${locale.detected}`,\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}