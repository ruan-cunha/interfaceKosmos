{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getRouteFromEntrypoint;\n\nvar _getRouteFromAssetPath = _interopRequireDefault(require(\"../shared/lib/router/utils/get-route-from-asset-path\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // matches pages/:page*.js\n\n\nconst SERVER_ROUTE_NAME_REGEX = /^pages[/\\\\](.*)$/; // matches static/pages/:page*.js\n\nconst BROWSER_ROUTE_NAME_REGEX = /^static[/\\\\]pages[/\\\\](.*)$/;\n\nfunction matchBundle(regex, input) {\n  const result = regex.exec(input);\n\n  if (!result) {\n    return null;\n  }\n\n  return (0, _getRouteFromAssetPath).default(`/${result[1]}`);\n}\n\nfunction getRouteFromEntrypoint(entryFile) {\n  let pagePath = matchBundle(SERVER_ROUTE_NAME_REGEX, entryFile);\n\n  if (pagePath) {\n    return pagePath;\n  } // Potentially the passed item is a browser bundle so we try to match that also\n\n\n  return matchBundle(BROWSER_ROUTE_NAME_REGEX, entryFile);\n}","map":{"version":3,"sources":["../../server/get-route-from-entrypoint.ts"],"names":[],"mappings":";;;;;kBAiBwB,sB;;AAjBU,IAAA,sBAAsD,GAAA,sBAAA,CAAA,OAAA,CAAA,sDAAA,CAAA,CAAtD;;;;;;EAElC;;;AACA,MAAM,uBAAuB,GAAA,kBAA7B,C,CACA;;AACA,MAAM,wBAAwB,GAAA,6BAA9B;;SAES,W,CAAY,K,EAAe,K,EAA8B;AAChE,QAAM,MAAM,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,CAAf;;AAEA,MAAE,CAAG,MAAL,EAAa;WACJ,I;AACR;;aAZ+B,sB,EAAsD,O,CAcxD,IAAG,MAAM,CAAC,CAAD,CAAE,E;AAC1C;;SAEuB,sB,CACtB,S,EACe;AACf,MAAI,QAAQ,GAAG,WAAW,CAAC,uBAAD,EAA0B,SAA1B,CAA1B;;AAEA,MAAI,QAAJ,EAAc;WACL,Q;AACR,GALc,CAOf;;;SACO,WAAW,CAAC,wBAAD,EAA2B,SAA3B,C;AACnB","sourcesContent":["import getRouteFromAssetPath from '../shared/lib/router/utils/get-route-from-asset-path'\n\n// matches pages/:page*.js\nconst SERVER_ROUTE_NAME_REGEX = /^pages[/\\\\](.*)$/\n// matches static/pages/:page*.js\nconst BROWSER_ROUTE_NAME_REGEX = /^static[/\\\\]pages[/\\\\](.*)$/\n\nfunction matchBundle(regex: RegExp, input: string): string | null {\n  const result = regex.exec(input)\n\n  if (!result) {\n    return null\n  }\n\n  return getRouteFromAssetPath(`/${result[1]}`)\n}\n\nexport default function getRouteFromEntrypoint(\n  entryFile: string\n): string | null {\n  let pagePath = matchBundle(SERVER_ROUTE_NAME_REGEX, entryFile)\n\n  if (pagePath) {\n    return pagePath\n  }\n\n  // Potentially the passed item is a browser bundle so we try to match that also\n  return matchBundle(BROWSER_ROUTE_NAME_REGEX, entryFile)\n}\n"]},"metadata":{},"sourceType":"script"}