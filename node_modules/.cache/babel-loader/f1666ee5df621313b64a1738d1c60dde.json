{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBlockedPage = isBlockedPage;\nexports.cleanAmpPath = cleanAmpPath;\nexports.mergeResults = mergeResults;\nexports.resultsToString = resultsToString;\n\nvar _zenObservable = _interopRequireDefault(require(\"next/dist/compiled/zen-observable\"));\n\nvar _constants = require(\"../shared/lib/constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isBlockedPage(pathname) {\n  return _constants.BLOCKED_PAGES.includes(pathname);\n}\n\nfunction cleanAmpPath(pathname) {\n  if (pathname.match(/\\?amp=(y|yes|true|1)/)) {\n    pathname = pathname.replace(/\\?amp=(y|yes|true|1)&?/, '?');\n  }\n\n  if (pathname.match(/&amp=(y|yes|true|1)/)) {\n    pathname = pathname.replace(/&amp=(y|yes|true|1)/, '');\n  }\n\n  pathname = pathname.replace(/\\?$/, '');\n  return pathname;\n}\n\nfunction mergeResults(results) {\n  // @ts-ignore\n  return _zenObservable.default.prototype.concat.call(...results);\n}\n\nasync function resultsToString(results) {\n  const chunks = [];\n  await mergeResults(results).forEach(chunk => {\n    chunks.push(chunk);\n  });\n  return chunks.join('');\n}","map":{"version":3,"sources":["../../server/utils.ts"],"names":[],"mappings":";;;;;QAGgB,a,GAAA,a;QAIA,Y,GAAA,Y;QAaA,Y,GAAA,Y;QAKM,e,GAAA,e;;AAzBC,IAAA,cAAmC,GAAA,sBAAA,CAAA,OAAA,CAAA,mCAAA,CAAA,CAAnC;;AACO,IAAA,UAAyB,GAAA,OAAA,CAAA,yBAAA,CAAzB;;;;;;;;SAEd,a,CAAc,Q,EAA2B;SAF3B,UAAyB,CAAA,aAAzB,CAGP,QAHO,CAGE,QAHF,C;AAI7B;;SAEe,Y,CAAa,Q,EAA0B;AACrD,MAAI,QAAQ,CAAC,KAAT,CAAc,sBAAd,CAAJ,EAA4C;AAC1C,IAAA,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAgB,wBAAhB,EAAgB,GAAhB,CAAX;AACD;;AACD,MAAI,QAAQ,CAAC,KAAT,CAAc,qBAAd,CAAJ,EAA2C;AACzC,IAAA,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAgB,qBAAhB,EAAgB,EAAhB,CAAX;AACD;;AACD,EAAA,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAgB,KAAhB,EAAgB,EAAhB,CAAX;SACO,Q;AACR;;SAIe,Y,CAAa,O,EAA4C;AACvE;SArBqB,cAAmC,CAAA,OAAnC,CAsBH,SAtBG,CAsBO,MAtBP,CAsBc,IAtBd,CAsBkB,GAAI,OAtBtB,C;AAuBtB;;eAEqB,e,CACpB,O,EACiB;AACjB,QAAM,MAAM,GAAA,EAAZ;QACM,YAAY,CAAC,OAAD,CAAZ,CAAsB,OAAtB,CAA+B,KAAF,IAAoB;AACrD,IAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACD,GAFK,C;SAGC,MAAM,CAAC,IAAP,CAAW,EAAX,C;AACR","sourcesContent":["import Observable from 'next/dist/compiled/zen-observable'\nimport { BLOCKED_PAGES } from '../shared/lib/constants'\n\nexport function isBlockedPage(pathname: string): boolean {\n  return BLOCKED_PAGES.includes(pathname)\n}\n\nexport function cleanAmpPath(pathname: string): string {\n  if (pathname.match(/\\?amp=(y|yes|true|1)/)) {\n    pathname = pathname.replace(/\\?amp=(y|yes|true|1)&?/, '?')\n  }\n  if (pathname.match(/&amp=(y|yes|true|1)/)) {\n    pathname = pathname.replace(/&amp=(y|yes|true|1)/, '')\n  }\n  pathname = pathname.replace(/\\?$/, '')\n  return pathname\n}\n\nexport type RenderResult = Observable<string>\n\nexport function mergeResults(results: Array<RenderResult>): RenderResult {\n  // @ts-ignore\n  return Observable.prototype.concat.call(...results)\n}\n\nexport async function resultsToString(\n  results: Array<RenderResult>\n): Promise<string> {\n  const chunks: string[] = []\n  await mergeResults(results).forEach((chunk: string) => {\n    chunks.push(chunk)\n  })\n  return chunks.join('')\n}\n"]},"metadata":{},"sourceType":"script"}