{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFormattedDiagnostic = getFormattedDiagnostic;\nexports.DiagnosticCategory = void 0;\n\nvar _codeFrame = require(\"next/dist/compiled/babel/code-frame\");\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DiagnosticCategory;\nexports.DiagnosticCategory = DiagnosticCategory;\n\n(function (DiagnosticCategory1) {\n  DiagnosticCategory1[DiagnosticCategory1[\"Warning\"] = 0] = \"Warning\";\n  DiagnosticCategory1[DiagnosticCategory1[\"Error\"] = 1] = \"Error\";\n  DiagnosticCategory1[DiagnosticCategory1[\"Suggestion\"] = 2] = \"Suggestion\";\n  DiagnosticCategory1[DiagnosticCategory1[\"Message\"] = 3] = \"Message\";\n})(DiagnosticCategory || (exports.DiagnosticCategory = DiagnosticCategory = {}));\n\nasync function getFormattedDiagnostic(ts, baseDir, diagnostic) {\n  let message = '';\n  const reason = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n  const category = diagnostic.category;\n\n  switch (category) {\n    // Warning\n    case DiagnosticCategory.Warning:\n      {\n        message += _chalk.default.yellow.bold('Type warning') + ': ';\n        break;\n      }\n    // Error\n\n    case DiagnosticCategory.Error:\n      {\n        message += _chalk.default.red.bold('Type error') + ': ';\n        break;\n      }\n    // 2 = Suggestion, 3 = Message\n\n    case DiagnosticCategory.Suggestion:\n    case DiagnosticCategory.Message:\n    default:\n      {\n        message += _chalk.default.cyan.bold(category === 2 ? 'Suggestion' : 'Info') + ': ';\n        break;\n      }\n  }\n\n  message += reason + '\\n';\n\n  if (diagnostic.file) {\n    const pos = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n    const line = pos.line + 1;\n    const character = pos.character + 1;\n\n    let fileName = _path.default.posix.normalize(_path.default.relative(baseDir, diagnostic.file.fileName).replace(/\\\\/g, '/'));\n\n    if (!fileName.startsWith('.')) {\n      fileName = './' + fileName;\n    }\n\n    message = _chalk.default.cyan(fileName) + ':' + _chalk.default.yellow(line.toString()) + ':' + _chalk.default.yellow(character.toString()) + '\\n' + message;\n    message += '\\n' + (0, _codeFrame).codeFrameColumns(diagnostic.file.getFullText(diagnostic.file.getSourceFile()), {\n      start: {\n        line: line,\n        column: character\n      }\n    }, {\n      forceColor: true\n    });\n  }\n\n  return message;\n}","map":{"version":3,"sources":["../../../lib/typescript/diagnosticFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["import { codeFrameColumns } from 'next/dist/compiled/babel/code-frame'\nimport chalk from 'chalk'\nimport path from 'path'\n\n// eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */\nexport enum DiagnosticCategory {\n  Warning = 0,\n  Error = 1,\n  Suggestion = 2,\n  Message = 3,\n}\n\nexport async function getFormattedDiagnostic(\n  ts: typeof import('typescript'),\n  baseDir: string,\n  diagnostic: import('typescript').Diagnostic\n): Promise<string> {\n  let message = ''\n\n  const reason = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')\n  const category = diagnostic.category\n  switch (category) {\n    // Warning\n    case DiagnosticCategory.Warning: {\n      message += chalk.yellow.bold('Type warning') + ': '\n      break\n    }\n    // Error\n    case DiagnosticCategory.Error: {\n      message += chalk.red.bold('Type error') + ': '\n      break\n    }\n    // 2 = Suggestion, 3 = Message\n    case DiagnosticCategory.Suggestion:\n    case DiagnosticCategory.Message:\n    default: {\n      message += chalk.cyan.bold(category === 2 ? 'Suggestion' : 'Info') + ': '\n      break\n    }\n  }\n  message += reason + '\\n'\n\n  if (diagnostic.file) {\n    const pos = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!)\n    const line = pos.line + 1\n    const character = pos.character + 1\n\n    let fileName = path.posix.normalize(\n      path.relative(baseDir, diagnostic.file.fileName).replace(/\\\\/g, '/')\n    )\n    if (!fileName.startsWith('.')) {\n      fileName = './' + fileName\n    }\n\n    message =\n      chalk.cyan(fileName) +\n      ':' +\n      chalk.yellow(line.toString()) +\n      ':' +\n      chalk.yellow(character.toString()) +\n      '\\n' +\n      message\n\n    message +=\n      '\\n' +\n      codeFrameColumns(\n        diagnostic.file.getFullText(diagnostic.file.getSourceFile()),\n        {\n          start: { line: line, column: character },\n        },\n        { forceColor: true }\n      )\n  }\n\n  return message\n}\n"]},"metadata":{},"sourceType":"script"}