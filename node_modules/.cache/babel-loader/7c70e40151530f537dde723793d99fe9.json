{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"./node-polyfill-fetch\");\n\nvar _constants = require(\"../lib/constants\");\n\nvar log = _interopRequireWildcard(require(\"../build/output/log\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _path = require(\"path\");\n\nvar _constants1 = require(\"../shared/lib/constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nlet ServerImpl;\n\nconst getServerImpl = async () => {\n  if (ServerImpl === undefined) ServerImpl = (await Promise.resolve().then(function () {\n    return _interopRequireWildcard(require('./next-server'));\n  })).default;\n  return ServerImpl;\n};\n\nclass NextServer {\n  constructor(options1) {\n    this.options = options1;\n  }\n\n  getRequestHandler() {\n    return async (req, res, parsedUrl) => {\n      const requestHandler = await this.getServerRequestHandler();\n      return requestHandler(req, res, parsedUrl);\n    };\n  }\n\n  setAssetPrefix(assetPrefix) {\n    if (this.server) {\n      this.server.setAssetPrefix(assetPrefix);\n    } else {\n      this.preparedAssetPrefix = assetPrefix;\n    }\n  }\n\n  logError(...args) {\n    if (this.server) {\n      this.server.logError(...args);\n    }\n  }\n\n  async render(...args) {\n    const server = await this.getServer();\n    return server.render(...args);\n  }\n\n  async renderToHTML(...args) {\n    const server = await this.getServer();\n    return server.renderToHTML(...args);\n  }\n\n  async renderError(...args) {\n    const server = await this.getServer();\n    return server.renderError(...args);\n  }\n\n  async renderErrorToHTML(...args) {\n    const server = await this.getServer();\n    return server.renderErrorToHTML(...args);\n  }\n\n  async render404(...args) {\n    const server = await this.getServer();\n    return server.render404(...args);\n  }\n\n  async serveStatic(...args) {\n    const server = await this.getServer();\n    return server.serveStatic(...args);\n  }\n\n  async prepare() {\n    const server = await this.getServer();\n    return server.prepare();\n  }\n\n  async close() {\n    const server = await this.getServer();\n    return server.close();\n  }\n\n  async createServer(options) {\n    if (options.dev) {\n      const DevServer = require('./dev/next-dev-server').default;\n\n      return new DevServer(options);\n    }\n\n    const ServerImplementation = await getServerImpl();\n    return new ServerImplementation(options);\n  }\n\n  async loadConfig() {\n    const phase = this.options.dev ? _constants1.PHASE_DEVELOPMENT_SERVER : _constants1.PHASE_PRODUCTION_SERVER;\n    const dir = (0, _path).resolve(this.options.dir || '.');\n    const conf = await (0, _config).default(phase, dir, this.options.conf);\n    return conf;\n  }\n\n  async getServer() {\n    if (!this.serverPromise) {\n      setTimeout(getServerImpl, 10);\n      this.serverPromise = this.loadConfig().then(async conf => {\n        this.server = await this.createServer({ ...this.options,\n          conf\n        });\n\n        if (this.preparedAssetPrefix) {\n          this.server.setAssetPrefix(this.preparedAssetPrefix);\n        }\n\n        return this.server;\n      });\n    }\n\n    return this.serverPromise;\n  }\n\n  async getServerRequestHandler() {\n    // Memoize request handler creation\n    if (!this.reqHandlerPromise) {\n      this.reqHandlerPromise = this.getServer().then(server => server.getRequestHandler().bind(server));\n    }\n\n    return this.reqHandlerPromise;\n  }\n\n}\n\nexports.NextServer = NextServer; // This file is used for when users run `require('next')`\n\nfunction createServer(options2) {\n  const standardEnv = ['production', 'development', 'test'];\n\n  if (options2 == null) {\n    throw new Error('The server has not been instantiated properly. https://nextjs.org/docs/messages/invalid-server-options');\n  }\n\n  if (!options2.isNextDevCommand && process.env.NODE_ENV && !standardEnv.includes(process.env.NODE_ENV)) {\n    log.warn(_constants.NON_STANDARD_NODE_ENV);\n  }\n\n  if (options2.dev) {\n    if (typeof options2.dev !== 'boolean') {\n      console.warn(\"Warning: 'dev' is not a boolean which could introduce unexpected behavior. https://nextjs.org/docs/messages/invalid-server-options\");\n    }\n  }\n\n  return new NextServer(options2);\n} // Support commonjs `require('next')`\n\n\nmodule.exports = createServer;\nexports = module.exports;\nvar _default = createServer;\nexports.default = _default;","map":{"version":3,"sources":["../../server/next.ts"],"names":[],"mappings":";;;;;;;;;AAEsC,IAAA,UAAkB,GAAA,OAAA,CAAA,kBAAA,CAAlB;;AAC1B,IAAA,GAAG,GAAA,uBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAH;;AAC2B,IAAA,OAAU,GAAA,sBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAV;;AACf,IAAA,KAAM,GAAA,OAAA,CAAA,MAAA,CAAN;;AAIjB,IAAA,WAAyB,GAAA,OAAA,CAAA,yBAAA,CAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWP,IAAI,UAAJ;;AAEA,MAAM,aAAa,GAAA,YAAe;AAChC,MAAI,UAAU,KAAK,SAAnB,EACE,UAAU,GAAA,CAAA,MAAA,OAAA,CAAA,OAAA,GAAA,IAAA,CAAA,YAAA;2CAAiB,e;GAAjB,CAAA,EAAmC,OAA7C;SACK,U;AACR,CAJD;;MAMa,U,CAAU;cAOT,Q,EAAgC;SACrC,O,GAAU,Q;AAChB;;AAED,EAAA,iBAAiB,GAAG;kBAEhB,G,EACA,G,EACA,S,KACG;AACH,YAAM,cAAc,GAAA,MAAA,KAAc,uBAAd,EAApB;aACO,cAAc,CAAC,GAAD,EAAM,GAAN,EAAW,SAAX,C;AACtB,K;AACF;;AAED,EAAA,cAAc,CAAC,WAAD,EAAsB;AAClC,QAAE,KAAO,MAAT,EAAiB;WACV,M,CAAO,c,CAAe,W;AAC5B,KAFD,MAEO;WACA,mB,GAAsB,W;AAC5B;AACF;;AAED,EAAA,QAAQ,CAAA,GAAI,IAAJ,EAA0C;AAChD,QAAE,KAAO,MAAT,EAAiB;WACV,M,CAAO,Q,CAAQ,GAAI,I;AACzB;AACF;;AAEW,QAAN,MAAM,CAAA,GAAI,IAAJ,EAAwC;AAClD,UAAM,MAAM,GAAA,MAAA,KAAc,SAAd,EAAZ;WACO,MAAM,CAAC,MAAP,CAAa,GAAI,IAAjB,C;AACR;;AAEiB,QAAZ,YAAY,CAAA,GAAI,IAAJ,EAA8C;AAC9D,UAAM,MAAM,GAAA,MAAA,KAAc,SAAd,EAAZ;WACO,MAAM,CAAC,YAAP,CAAmB,GAAI,IAAvB,C;AACR;;AAEgB,QAAX,WAAW,CAAA,GAAI,IAAJ,EAA6C;AAC5D,UAAM,MAAM,GAAA,MAAA,KAAc,SAAd,EAAZ;WACO,MAAM,CAAC,WAAP,CAAkB,GAAI,IAAtB,C;AACR;;AAEsB,QAAjB,iBAAiB,CAAA,GAAI,IAAJ,EAAmD;AACxE,UAAM,MAAM,GAAA,MAAA,KAAc,SAAd,EAAZ;WACO,MAAM,CAAC,iBAAP,CAAwB,GAAI,IAA5B,C;AACR;;AAEc,QAAT,SAAS,CAAA,GAAI,IAAJ,EAA2C;AACxD,UAAM,MAAM,GAAA,MAAA,KAAc,SAAd,EAAZ;WACO,MAAM,CAAC,SAAP,CAAgB,GAAI,IAApB,C;AACR;;AAEgB,QAAX,WAAW,CAAA,GAAI,IAAJ,EAA6C;AAC5D,UAAM,MAAM,GAAA,MAAA,KAAc,SAAd,EAAZ;WACO,MAAM,CAAC,WAAP,CAAkB,GAAI,IAAtB,C;AACR;;AAEY,QAAP,OAAO,GAAG;AACd,UAAM,MAAM,GAAA,MAAA,KAAc,SAAd,EAAZ;WACO,MAAM,CAAC,OAAP,E;AACR;;AAEU,QAAL,KAAK,GAAG;AACZ,UAAM,MAAM,GAAA,MAAA,KAAc,SAAd,EAAZ;WACQ,MAAM,CAAS,KAAf,E;AACT;;AAEyB,QAAZ,YAAY,CACxB,OADwB,EAKP;AACjB,QAAI,OAAO,CAAC,GAAZ,EAAiB;AACf,YAAM,SAAS,GAAG,OAAO,CAAA,uBAAA,CAAP,CAAiC,OAAnD;;aACO,IAAI,SAAJ,CAAc,OAAd,C;AACR;;AACD,UAAM,oBAAoB,GAAA,MAAS,aAAa,EAAhD;WACO,IAAI,oBAAJ,CAAyB,OAAzB,C;AACR;;AAEuB,QAAV,UAAU,GAAG;AACzB,UAAM,KAAK,GAAA,KAAQ,OAAR,CAAgB,GAAhB,GA9GR,WAAyB,CAAA,wBA8GjB,GA9GR,WAAyB,CAAA,uBA8G5B;AAGA,UAAM,GAAG,GAAA,CAAA,GArHW,KAqHX,EArHiB,OAqHjB,CArHiB,KAqHD,OArHC,CAqHO,GArHP,IAqHU,GAA3B,CAAT;AACA,UAAM,IAAI,GAAA,MAAA,CAAA,GAvHyB,OAuHzB,EAvHmC,OAuHnC,CAAoB,KAApB,EAA2B,GAA3B,EAA8B,KAAO,OAAP,CAAe,IAA7C,CAAV;WACO,I;AACR;;AAEsB,QAAT,SAAS,GAAG;AACxB,QAAE,CAAA,KAAQ,aAAV,EAAyB;AACvB,MAAA,UAAU,CAAC,aAAD,EAAgB,EAAhB,CAAV;WACK,a,GAAa,KAAQ,UAAR,GAAqB,IAArB,CAAyB,MAAQ,IAAR,IAAiB;aACrD,M,GAAM,MAAA,KAAc,YAAd,CAA0B,E,QAC3B,OAD2B;AAEnC,UAAA;AAFmC,SAA1B,C;;AAIX,YAAE,KAAO,mBAAT,EAA8B;eACvB,M,CAAO,c,CAAc,KAAM,mB;AACjC;;oBACW,M;AACb,OATiB,C;AAUnB;;gBACW,a;AACb;;AAEoC,QAAvB,uBAAuB,GAAG;AACtC;AACA,QAAE,CAAA,KAAQ,iBAAV,EAA6B;WACtB,iB,GAAiB,KAAQ,SAAR,GAAoB,IAApB,CAA0B,MAAF,IAC5C,MAAM,CAAC,iBAAP,GAA2B,IAA3B,CAAgC,MAAhC,CADoB,C;AAGvB;;gBACW,iB;AACb;;AA5HoB;;QAAV,U,GAAA,U,EA+Hb;;SACS,Y,CAAa,Q,EAA4C;AAChE,QAAM,WAAW,GAAA,CAAI,YAAJ,EAAkB,aAAlB,EAAiC,MAAjC,CAAjB;;AAEA,MAAI,QAAO,IAAI,IAAf,EAAqB;AACnB,UAAM,IAAI,KAAJ,CAAS,wGAAT,CAAN;AAGD;;AAED,MAAE,CACE,QAAO,CAAS,gBADlB,IAEA,OAAO,CAAC,GAAR,CAAY,QAFZ,IAEoB,CACnB,WAAW,CAAC,QAAZ,CAAqB,OAAO,CAAC,GAAR,CAAY,QAAjC,CAHH,EAIE;AAtKQ,IAAA,GAAG,CAuKP,IAvKI,CAD0B,UAAkB,CAAA,qBAC5C;AAwKT;;AAED,MAAI,QAAO,CAAC,GAAZ,EAAiB;AACf,QAAE,OAAS,QAAO,CAAC,GAAjB,KAAoB,SAAtB,EAAsC;AACpC,MAAA,OAAO,CAAC,IAAR,CAAY,oIAAZ;AAGD;AACF;;SAEM,IAAI,UAAJ,CAAe,QAAf,C;AACR,C,CAED;;;AACA,MAAM,CAAC,OAAP,GAAiB,YAAjB;AACA,OAAO,GAAG,MAAM,CAAC,OAAjB;eAGe,Y","sourcesContent":["import './node-polyfill-fetch'\nimport { default as Server, ServerConstructor } from './next-server'\nimport { NON_STANDARD_NODE_ENV } from '../lib/constants'\nimport * as log from '../build/output/log'\nimport loadConfig, { NextConfig } from './config'\nimport { resolve } from 'path'\nimport {\n  PHASE_DEVELOPMENT_SERVER,\n  PHASE_PRODUCTION_SERVER,\n} from '../shared/lib/constants'\nimport { IncomingMessage, ServerResponse } from 'http'\nimport { UrlWithParsedQuery } from 'url'\n\ntype NextServerConstructor = ServerConstructor & {\n  /**\n   * Whether to launch Next.js in dev mode - @default false\n   */\n  dev?: boolean\n}\n\nlet ServerImpl: typeof Server\n\nconst getServerImpl = async () => {\n  if (ServerImpl === undefined)\n    ServerImpl = (await import('./next-server')).default\n  return ServerImpl\n}\n\nexport class NextServer {\n  private serverPromise?: Promise<Server>\n  private server?: Server\n  private reqHandlerPromise?: Promise<any>\n  private preparedAssetPrefix?: string\n  options: NextServerConstructor\n\n  constructor(options: NextServerConstructor) {\n    this.options = options\n  }\n\n  getRequestHandler() {\n    return async (\n      req: IncomingMessage,\n      res: ServerResponse,\n      parsedUrl?: UrlWithParsedQuery\n    ) => {\n      const requestHandler = await this.getServerRequestHandler()\n      return requestHandler(req, res, parsedUrl)\n    }\n  }\n\n  setAssetPrefix(assetPrefix: string) {\n    if (this.server) {\n      this.server.setAssetPrefix(assetPrefix)\n    } else {\n      this.preparedAssetPrefix = assetPrefix\n    }\n  }\n\n  logError(...args: Parameters<Server['logError']>) {\n    if (this.server) {\n      this.server.logError(...args)\n    }\n  }\n\n  async render(...args: Parameters<Server['render']>) {\n    const server = await this.getServer()\n    return server.render(...args)\n  }\n\n  async renderToHTML(...args: Parameters<Server['renderToHTML']>) {\n    const server = await this.getServer()\n    return server.renderToHTML(...args)\n  }\n\n  async renderError(...args: Parameters<Server['renderError']>) {\n    const server = await this.getServer()\n    return server.renderError(...args)\n  }\n\n  async renderErrorToHTML(...args: Parameters<Server['renderErrorToHTML']>) {\n    const server = await this.getServer()\n    return server.renderErrorToHTML(...args)\n  }\n\n  async render404(...args: Parameters<Server['render404']>) {\n    const server = await this.getServer()\n    return server.render404(...args)\n  }\n\n  async serveStatic(...args: Parameters<Server['serveStatic']>) {\n    const server = await this.getServer()\n    return server.serveStatic(...args)\n  }\n\n  async prepare() {\n    const server = await this.getServer()\n    return server.prepare()\n  }\n\n  async close() {\n    const server = await this.getServer()\n    return (server as any).close()\n  }\n\n  private async createServer(\n    options: NextServerConstructor & {\n      conf: NextConfig\n      isNextDevCommand?: boolean\n    }\n  ): Promise<Server> {\n    if (options.dev) {\n      const DevServer = require('./dev/next-dev-server').default\n      return new DevServer(options)\n    }\n    const ServerImplementation = await getServerImpl()\n    return new ServerImplementation(options)\n  }\n\n  private async loadConfig() {\n    const phase = this.options.dev\n      ? PHASE_DEVELOPMENT_SERVER\n      : PHASE_PRODUCTION_SERVER\n    const dir = resolve(this.options.dir || '.')\n    const conf = await loadConfig(phase, dir, this.options.conf)\n    return conf\n  }\n\n  private async getServer() {\n    if (!this.serverPromise) {\n      setTimeout(getServerImpl, 10)\n      this.serverPromise = this.loadConfig().then(async (conf) => {\n        this.server = await this.createServer({\n          ...this.options,\n          conf,\n        })\n        if (this.preparedAssetPrefix) {\n          this.server.setAssetPrefix(this.preparedAssetPrefix)\n        }\n        return this.server\n      })\n    }\n    return this.serverPromise\n  }\n\n  private async getServerRequestHandler() {\n    // Memoize request handler creation\n    if (!this.reqHandlerPromise) {\n      this.reqHandlerPromise = this.getServer().then((server) =>\n        server.getRequestHandler().bind(server)\n      )\n    }\n    return this.reqHandlerPromise\n  }\n}\n\n// This file is used for when users run `require('next')`\nfunction createServer(options: NextServerConstructor): NextServer {\n  const standardEnv = ['production', 'development', 'test']\n\n  if (options == null) {\n    throw new Error(\n      'The server has not been instantiated properly. https://nextjs.org/docs/messages/invalid-server-options'\n    )\n  }\n\n  if (\n    !(options as any).isNextDevCommand &&\n    process.env.NODE_ENV &&\n    !standardEnv.includes(process.env.NODE_ENV)\n  ) {\n    log.warn(NON_STANDARD_NODE_ENV)\n  }\n\n  if (options.dev) {\n    if (typeof options.dev !== 'boolean') {\n      console.warn(\n        \"Warning: 'dev' is not a boolean which could introduce unexpected behavior. https://nextjs.org/docs/messages/invalid-server-options\"\n      )\n    }\n  }\n\n  return new NextServer(options)\n}\n\n// Support commonjs `require('next')`\nmodule.exports = createServer\nexports = module.exports\n\n// Support `import next from 'next'`\nexport default createServer\n"]},"metadata":{},"sourceType":"script"}