{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path = _interopRequireWildcard(require(\"path\"));\n\nvar _webpack = require(\"next/dist/compiled/webpack/webpack\");\n\nvar _pLimit = _interopRequireDefault(require(\"p-limit\"));\n\nvar _jestWorker = require(\"jest-worker\");\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _cacache = _interopRequireDefault(require(\"next/dist/compiled/cacache\"));\n\nvar _profilingPlugin = require(\"../../profiling-plugin\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction getEcmaVersion(environment) {\n  // ES 6th\n  if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n    return 2015;\n  } // ES 11th\n\n\n  if (environment.bigIntLiteral || environment.dynamicImport) {\n    return 2020;\n  }\n\n  return 5;\n}\n\nfunction buildError(error, file) {\n  if (error.line) {\n    return new Error(`${file} from Terser\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split('\\n').slice(1).join('\\n')}` : ''}`);\n  }\n\n  if (error.stack) {\n    return new Error(`${file} from Terser\\n${error.message}\\n${error.stack}`);\n  }\n\n  return new Error(`${file} from Terser\\n${error.message}`);\n}\n\nclass Webpack4Cache {\n  constructor(cacheDir, {\n    SourceMapSource: SourceMapSource1,\n    RawSource: RawSource1\n  }) {\n    this.cacheDir = cacheDir;\n    this.sources = {\n      SourceMapSource: SourceMapSource1,\n      RawSource: RawSource1\n    };\n  }\n\n  getLazyHashedEtag(obj) {\n    let str;\n\n    if (obj.source) {\n      str = obj.source();\n    }\n\n    const hash = _crypto.default.createHash('md4');\n\n    hash.update(str ? str : obj);\n    return hash.digest('base64');\n  }\n\n  async getPromise(identifier, etag) {\n    let cachedResult;\n\n    try {\n      cachedResult = await _cacache.default.get(this.cacheDir, etag);\n    } catch (ignoreError) {\n      // eslint-disable-next-line no-undefined\n      return undefined;\n    }\n\n    cachedResult = JSON.parse(cachedResult.data);\n    const {\n      code,\n      name,\n      map,\n      input,\n      inputSourceMap\n    } = cachedResult;\n    let source;\n\n    if (map) {\n      source = new this.sources.SourceMapSource(code, name, map, input, inputSourceMap, true);\n    } else {\n      source = new this.sources.RawSource(code);\n    }\n\n    return {\n      source\n    };\n  }\n\n  async storePromise(identifier, etag, data) {\n    await _cacache.default.put(this.cacheDir, etag, JSON.stringify(data));\n  }\n\n}\n\nclass TerserPlugin {\n  constructor(options = {}) {\n    const {\n      cacheDir: cacheDir1,\n      terserOptions = {},\n      parallel,\n      swcMinify\n    } = options;\n    this.options = {\n      swcMinify,\n      cacheDir: cacheDir1,\n      parallel,\n      terserOptions\n    };\n  }\n\n  async optimize(compiler, compilation, assets, optimizeOptions, cache, {\n    SourceMapSource,\n    RawSource\n  }) {\n    const compilerSpan = _profilingPlugin.spans.get(compiler);\n\n    const terserSpan = compilerSpan.traceChild('terser-webpack-plugin-optimize');\n    terserSpan.setAttribute('webpackVersion', _webpack.isWebpack5 ? 5 : 4);\n    terserSpan.setAttribute('compilationName', compilation.name);\n    return terserSpan.traceAsyncFn(async () => {\n      let numberOfAssetsForMinify = 0;\n      const assetsList = _webpack.isWebpack5 ? Object.keys(assets) : [...Array.from(compilation.additionalChunkAssets || []), ...Array.from(assets).reduce((acc, chunk) => {\n        return acc.concat(Array.from(chunk.files || []));\n      }, [])];\n      const assetsForMinify = await Promise.all(assetsList.filter(name => {\n        if (!_webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n        undefined, {\n          test: /\\.[cm]?js(\\?.*)?$/i\n        })(name)) {\n          return false;\n        }\n\n        const res = compilation.getAsset(name);\n\n        if (!res) {\n          console.log(name);\n          return false;\n        }\n\n        const {\n          info\n        } = res; // Skip double minimize assets from child compilation\n\n        if (info.minimized) {\n          return false;\n        }\n\n        return true;\n      }).map(async name => {\n        const {\n          info,\n          source\n        } = compilation.getAsset(name);\n        const eTag = cache.getLazyHashedEtag(source);\n        const output = await cache.getPromise(name, eTag);\n\n        if (!output) {\n          numberOfAssetsForMinify += 1;\n        }\n\n        return {\n          name,\n          info,\n          inputSource: source,\n          output,\n          eTag\n        };\n      }));\n      const numberOfWorkers = Math.min(numberOfAssetsForMinify, optimizeOptions.availableNumberOfCores);\n      let initializedWorker; // eslint-disable-next-line consistent-return\n\n      const getWorker = () => {\n        if (this.options.swcMinify) {\n          return {\n            minify: async options1 => {\n              const result = await require('../../../../swc').transform(options1.input, {\n                minify: true,\n                jsc: {\n                  minify: {\n                    compress: true,\n                    mangle: true\n                  }\n                }\n              });\n              return result;\n            }\n          };\n        }\n\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        initializedWorker = new _jestWorker.Worker(path.join(__dirname, './minify.js'), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        });\n        initializedWorker.getStdout().pipe(process.stdout);\n        initializedWorker.getStderr().pipe(process.stderr);\n        return initializedWorker;\n      };\n\n      const limit = (0, _pLimit).default( // When using the SWC minifier the limit will be handled by Node.js\n      this.options.swcMinify ? Infinity : numberOfAssetsForMinify > 0 ? numberOfWorkers : Infinity);\n      const scheduledTasks = [];\n\n      for (const asset of assetsForMinify) {\n        scheduledTasks.push(limit(async () => {\n          const {\n            name,\n            inputSource,\n            info,\n            eTag\n          } = asset;\n          let {\n            output\n          } = asset;\n          const minifySpan = terserSpan.traceChild('minify-js');\n          minifySpan.setAttribute('name', name);\n          minifySpan.setAttribute('cache', typeof output === 'undefined' ? 'MISS' : 'HIT');\n          return minifySpan.traceAsyncFn(async () => {\n            if (!output) {\n              const {\n                source: sourceFromInputSource,\n                map: inputSourceMap\n              } = inputSource.sourceAndMap();\n              const input = Buffer.isBuffer(sourceFromInputSource) ? sourceFromInputSource.toString() : sourceFromInputSource;\n              const options1 = {\n                name,\n                input,\n                inputSourceMap,\n                terserOptions: { ...this.options.terserOptions\n                }\n              };\n\n              if (typeof options1.terserOptions.module === 'undefined') {\n                if (typeof info.javascriptModule !== 'undefined') {\n                  options1.terserOptions.module = info.javascriptModule;\n                } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n                  options1.terserOptions.module = true;\n                } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n                  options1.terserOptions.module = false;\n                }\n              }\n\n              try {\n                output = await getWorker().minify(options1);\n              } catch (error) {\n                compilation.errors.push(buildError(error, name));\n                return;\n              }\n\n              if (output.map) {\n                output.source = new SourceMapSource(output.code, name, output.map, input, inputSourceMap, true);\n              } else {\n                output.source = new RawSource(output.code);\n              }\n\n              if (_webpack.isWebpack5) {\n                await cache.storePromise(name, eTag, {\n                  source: output.source\n                });\n              } else {\n                await cache.storePromise(name, eTag, {\n                  code: output.code,\n                  map: output.map,\n                  name,\n                  input,\n                  inputSourceMap\n                });\n              }\n            }\n            /** @type {AssetInfo} */\n\n\n            const newInfo = {\n              minimized: true\n            };\n            const {\n              source\n            } = output;\n            compilation.updateAsset(name, source, newInfo);\n          });\n        }));\n      }\n\n      await Promise.all(scheduledTasks);\n\n      if (initializedWorker) {\n        await initializedWorker.end();\n      }\n    });\n  }\n  /**\n  * @param {Compiler} compiler\n  * @returns {void}\n  */\n\n\n  apply(compiler) {\n    var ref;\n    const {\n      SourceMapSource: SourceMapSource2,\n      RawSource: RawSource2\n    } = (compiler === null || compiler === void 0 ? void 0 : (ref = compiler.webpack) === null || ref === void 0 ? void 0 : ref.sources) || _webpack.sources;\n    const {\n      output\n    } = compiler.options;\n\n    if (typeof this.options.terserOptions.ecma === 'undefined') {\n      this.options.terserOptions.ecma = getEcmaVersion(output.environment || {});\n    }\n\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = this.options.parallel;\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      // Don't run minifier against mini-css-extract-plugin\n      if (compilation.name !== 'client' && compilation.name !== 'server') {\n        return;\n      }\n\n      const cache = _webpack.isWebpack5 ? compilation.getCache('TerserWebpackPlugin') : new Webpack4Cache(this.options.cacheDir, {\n        SourceMapSource: SourceMapSource2,\n        RawSource: RawSource2\n      });\n\n      const handleHashForChunk = (hash, chunk) => {\n        // increment 'c' to invalidate cache\n        hash.update('c');\n      };\n\n      if (_webpack.isWebpack5) {\n        const JSModulesHooks = _webpack.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n\n        JSModulesHooks.chunkHash.tap(pluginName, (chunk, hash) => {\n          if (!chunk.hasRuntime()) return;\n          return handleHashForChunk(hash, chunk);\n        });\n        compilation.hooks.processAssets.tapPromise({\n          name: pluginName,\n          stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n        }, assets => this.optimize(compiler, compilation, assets, {\n          availableNumberOfCores\n        }, cache, {\n          SourceMapSource: SourceMapSource2,\n          RawSource: RawSource2\n        }));\n        compilation.hooks.statsPrinter.tap(pluginName, stats => {\n          stats.hooks.print.for('asset.info.minimized').tap('terser-webpack-plugin', (minimized, {\n            green,\n            formatFlag\n          }) => // eslint-disable-next-line no-undefined\n          minimized ? green(formatFlag('minimized')) : undefined);\n        });\n      } else {\n        compilation.mainTemplate.hooks.hashForChunk.tap(pluginName, handleHashForChunk);\n        compilation.chunkTemplate.hooks.hashForChunk.tap(pluginName, handleHashForChunk);\n        compilation.hooks.optimizeChunkAssets.tapPromise(pluginName, async assets => {\n          return await this.optimize(compiler, compilation, assets, {\n            availableNumberOfCores\n          }, cache, {\n            SourceMapSource: SourceMapSource2,\n            RawSource: RawSource2\n          });\n        });\n      }\n    });\n  }\n\n}\n\nexports.TerserPlugin = TerserPlugin;","map":{"version":3,"sources":["../../../../../../build/webpack/plugins/terser-webpack-plugin/src/index.js"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as path from 'path'\nimport {\n  webpack,\n  ModuleFilenameHelpers,\n  isWebpack5,\n  sources,\n} from 'next/dist/compiled/webpack/webpack'\nimport pLimit from 'p-limit'\nimport { Worker } from 'jest-worker'\nimport crypto from 'crypto'\nimport cacache from 'next/dist/compiled/cacache'\nimport { spans } from '../../profiling-plugin'\n\nfunction getEcmaVersion(environment) {\n  // ES 6th\n  if (\n    environment.arrowFunction ||\n    environment.const ||\n    environment.destructuring ||\n    environment.forOf ||\n    environment.module\n  ) {\n    return 2015\n  }\n\n  // ES 11th\n  if (environment.bigIntLiteral || environment.dynamicImport) {\n    return 2020\n  }\n\n  return 5\n}\n\nfunction buildError(error, file) {\n  if (error.line) {\n    return new Error(\n      `${file} from Terser\\n${error.message} [${file}:${error.line},${\n        error.col\n      }]${\n        error.stack ? `\\n${error.stack.split('\\n').slice(1).join('\\n')}` : ''\n      }`\n    )\n  }\n\n  if (error.stack) {\n    return new Error(`${file} from Terser\\n${error.message}\\n${error.stack}`)\n  }\n\n  return new Error(`${file} from Terser\\n${error.message}`)\n}\n\nclass Webpack4Cache {\n  constructor(cacheDir, { SourceMapSource, RawSource }) {\n    this.cacheDir = cacheDir\n    this.sources = { SourceMapSource, RawSource }\n  }\n  getLazyHashedEtag(obj) {\n    let str\n    if (obj.source) {\n      str = obj.source()\n    }\n    const hash = crypto.createHash('md4')\n    hash.update(str ? str : obj)\n    return hash.digest('base64')\n  }\n\n  async getPromise(identifier, etag) {\n    let cachedResult\n\n    try {\n      cachedResult = await cacache.get(this.cacheDir, etag)\n    } catch (ignoreError) {\n      // eslint-disable-next-line no-undefined\n      return undefined\n    }\n\n    cachedResult = JSON.parse(cachedResult.data)\n\n    const { code, name, map, input, inputSourceMap } = cachedResult\n\n    let source\n\n    if (map) {\n      source = new this.sources.SourceMapSource(\n        code,\n        name,\n        map,\n        input,\n        inputSourceMap,\n        true\n      )\n    } else {\n      source = new this.sources.RawSource(code)\n    }\n\n    return { source }\n  }\n\n  async storePromise(identifier, etag, data) {\n    await cacache.put(this.cacheDir, etag, JSON.stringify(data))\n  }\n}\n\nexport class TerserPlugin {\n  constructor(options = {}) {\n    const { cacheDir, terserOptions = {}, parallel, swcMinify } = options\n\n    this.options = {\n      swcMinify,\n      cacheDir,\n      parallel,\n      terserOptions,\n    }\n  }\n\n  async optimize(\n    compiler,\n    compilation,\n    assets,\n    optimizeOptions,\n    cache,\n    { SourceMapSource, RawSource }\n  ) {\n    const compilerSpan = spans.get(compiler)\n    const terserSpan = compilerSpan.traceChild('terser-webpack-plugin-optimize')\n    terserSpan.setAttribute('webpackVersion', isWebpack5 ? 5 : 4)\n    terserSpan.setAttribute('compilationName', compilation.name)\n\n    return terserSpan.traceAsyncFn(async () => {\n      let numberOfAssetsForMinify = 0\n      const assetsList = isWebpack5\n        ? Object.keys(assets)\n        : [\n            ...Array.from(compilation.additionalChunkAssets || []),\n            ...Array.from(assets).reduce((acc, chunk) => {\n              return acc.concat(Array.from(chunk.files || []))\n            }, []),\n          ]\n\n      const assetsForMinify = await Promise.all(\n        assetsList\n          .filter((name) => {\n            if (\n              !ModuleFilenameHelpers.matchObject.bind(\n                // eslint-disable-next-line no-undefined\n                undefined,\n                { test: /\\.[cm]?js(\\?.*)?$/i }\n              )(name)\n            ) {\n              return false\n            }\n\n            const res = compilation.getAsset(name)\n            if (!res) {\n              console.log(name)\n              return false\n            }\n\n            const { info } = res\n\n            // Skip double minimize assets from child compilation\n            if (info.minimized) {\n              return false\n            }\n\n            return true\n          })\n          .map(async (name) => {\n            const { info, source } = compilation.getAsset(name)\n\n            const eTag = cache.getLazyHashedEtag(source)\n            const output = await cache.getPromise(name, eTag)\n\n            if (!output) {\n              numberOfAssetsForMinify += 1\n            }\n\n            return { name, info, inputSource: source, output, eTag }\n          })\n      )\n\n      const numberOfWorkers = Math.min(\n        numberOfAssetsForMinify,\n        optimizeOptions.availableNumberOfCores\n      )\n\n      let initializedWorker\n\n      // eslint-disable-next-line consistent-return\n      const getWorker = () => {\n        if (this.options.swcMinify) {\n          return {\n            minify: async (options) => {\n              const result = await require('../../../../swc').transform(\n                options.input,\n                {\n                  minify: true,\n                  jsc: {\n                    minify: {\n                      compress: true,\n                      mangle: true,\n                    },\n                  },\n                }\n              )\n\n              return result\n            },\n          }\n        }\n\n        if (initializedWorker) {\n          return initializedWorker\n        }\n\n        initializedWorker = new Worker(path.join(__dirname, './minify.js'), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true,\n        })\n\n        initializedWorker.getStdout().pipe(process.stdout)\n        initializedWorker.getStderr().pipe(process.stderr)\n\n        return initializedWorker\n      }\n\n      const limit = pLimit(\n        // When using the SWC minifier the limit will be handled by Node.js\n        this.options.swcMinify\n          ? Infinity\n          : numberOfAssetsForMinify > 0\n          ? numberOfWorkers\n          : Infinity\n      )\n      const scheduledTasks = []\n\n      for (const asset of assetsForMinify) {\n        scheduledTasks.push(\n          limit(async () => {\n            const { name, inputSource, info, eTag } = asset\n            let { output } = asset\n\n            const minifySpan = terserSpan.traceChild('minify-js')\n            minifySpan.setAttribute('name', name)\n            minifySpan.setAttribute(\n              'cache',\n              typeof output === 'undefined' ? 'MISS' : 'HIT'\n            )\n\n            return minifySpan.traceAsyncFn(async () => {\n              if (!output) {\n                const { source: sourceFromInputSource, map: inputSourceMap } =\n                  inputSource.sourceAndMap()\n\n                const input = Buffer.isBuffer(sourceFromInputSource)\n                  ? sourceFromInputSource.toString()\n                  : sourceFromInputSource\n\n                const options = {\n                  name,\n                  input,\n                  inputSourceMap,\n                  terserOptions: { ...this.options.terserOptions },\n                }\n\n                if (typeof options.terserOptions.module === 'undefined') {\n                  if (typeof info.javascriptModule !== 'undefined') {\n                    options.terserOptions.module = info.javascriptModule\n                  } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n                    options.terserOptions.module = true\n                  } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n                    options.terserOptions.module = false\n                  }\n                }\n\n                try {\n                  output = await getWorker().minify(options)\n                } catch (error) {\n                  compilation.errors.push(buildError(error, name))\n\n                  return\n                }\n\n                if (output.map) {\n                  output.source = new SourceMapSource(\n                    output.code,\n                    name,\n                    output.map,\n                    input,\n                    /** @type {SourceMapRawSourceMap} */ (inputSourceMap),\n                    true\n                  )\n                } else {\n                  output.source = new RawSource(output.code)\n                }\n\n                if (isWebpack5) {\n                  await cache.storePromise(name, eTag, {\n                    source: output.source,\n                  })\n                } else {\n                  await cache.storePromise(name, eTag, {\n                    code: output.code,\n                    map: output.map,\n                    name,\n                    input,\n                    inputSourceMap,\n                  })\n                }\n              }\n\n              /** @type {AssetInfo} */\n              const newInfo = { minimized: true }\n              const { source } = output\n\n              compilation.updateAsset(name, source, newInfo)\n            })\n          })\n        )\n      }\n\n      await Promise.all(scheduledTasks)\n\n      if (initializedWorker) {\n        await initializedWorker.end()\n      }\n    })\n  }\n\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    const { SourceMapSource, RawSource } = compiler?.webpack?.sources || sources\n    const { output } = compiler.options\n\n    if (typeof this.options.terserOptions.ecma === 'undefined') {\n      this.options.terserOptions.ecma = getEcmaVersion(output.environment || {})\n    }\n\n    const pluginName = this.constructor.name\n    const availableNumberOfCores = this.options.parallel\n\n    compiler.hooks.compilation.tap(pluginName, (compilation) => {\n      // Don't run minifier against mini-css-extract-plugin\n      if (compilation.name !== 'client' && compilation.name !== 'server') {\n        return\n      }\n\n      const cache = isWebpack5\n        ? compilation.getCache('TerserWebpackPlugin')\n        : new Webpack4Cache(this.options.cacheDir, {\n            SourceMapSource,\n            RawSource,\n          })\n\n      const handleHashForChunk = (hash, chunk) => {\n        // increment 'c' to invalidate cache\n        hash.update('c')\n      }\n\n      if (isWebpack5) {\n        const JSModulesHooks =\n          webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(\n            compilation\n          )\n        JSModulesHooks.chunkHash.tap(pluginName, (chunk, hash) => {\n          if (!chunk.hasRuntime()) return\n          return handleHashForChunk(hash, chunk)\n        })\n\n        compilation.hooks.processAssets.tapPromise(\n          {\n            name: pluginName,\n            stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n          },\n          (assets) =>\n            this.optimize(\n              compiler,\n              compilation,\n              assets,\n              {\n                availableNumberOfCores,\n              },\n              cache,\n              { SourceMapSource, RawSource }\n            )\n        )\n\n        compilation.hooks.statsPrinter.tap(pluginName, (stats) => {\n          stats.hooks.print\n            .for('asset.info.minimized')\n            .tap('terser-webpack-plugin', (minimized, { green, formatFlag }) =>\n              // eslint-disable-next-line no-undefined\n              minimized ? green(formatFlag('minimized')) : undefined\n            )\n        })\n      } else {\n        compilation.mainTemplate.hooks.hashForChunk.tap(\n          pluginName,\n          handleHashForChunk\n        )\n        compilation.chunkTemplate.hooks.hashForChunk.tap(\n          pluginName,\n          handleHashForChunk\n        )\n\n        compilation.hooks.optimizeChunkAssets.tapPromise(\n          pluginName,\n          async (assets) => {\n            return await this.optimize(\n              compiler,\n              compilation,\n              assets,\n              {\n                availableNumberOfCores,\n              },\n              cache,\n              { SourceMapSource, RawSource }\n            )\n          }\n        )\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}