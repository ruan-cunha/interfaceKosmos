{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseRelativeUrl = parseRelativeUrl;\n\nvar _utils = require(\"../../utils\");\n\nvar _querystring = require(\"./querystring\");\n\nfunction parseRelativeUrl(url, base) {\n  const globalBase = new URL(typeof window === 'undefined' ? 'http://n' : (0, _utils).getLocationOrigin());\n  const resolvedBase = base ? new URL(base, globalBase) : globalBase;\n  const {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href,\n    origin\n  } = new URL(url, resolvedBase);\n\n  if (origin !== globalBase.origin) {\n    throw new Error(`invariant: invalid relative URL, router received ${url}`);\n  }\n\n  return {\n    pathname,\n    query: (0, _querystring).searchParamsToUrlQuery(searchParams),\n    search,\n    hash,\n    href: href.slice(globalBase.origin.length)\n  };\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/parse-relative-url.ts"],"names":[],"mappings":";;;;;QASgB,gB,GAAA,gB;;AATkB,IAAA,MAAa,GAAA,OAAA,CAAA,aAAA,CAAb;;AACK,IAAA,YAAe,GAAA,OAAA,CAAA,eAAA,CAAf;;SAQvB,gB,CAAiB,G,EAAa,I,EAAe;AAC3D,QAAM,UAAU,GAAG,IAAI,GAAJ,CAAO,OACjB,MADiB,KACX,WADW,GACK,UADL,GACkB,CAAA,GAXZ,MAWY,EAXC,iBAWD,EADzB,CAAnB;AAGA,QAAM,YAAY,GAAG,IAAI,GAAG,IAAI,GAAJ,CAAQ,IAAR,EAAc,UAAd,CAAH,GAA+B,UAAxD;AACA,QAAK;AAAG,IAAA,QAAH;AAAa,IAAA,YAAb;AAA2B,IAAA,MAA3B;AAAmC,IAAA,IAAnC;AAAyC,IAAA,IAAzC;AAA+C,IAAA;AAA/C,MAA0D,IAAI,GAAJ,CAC7D,GAD6D,EAE7D,YAF6D,CAA/D;;AAIA,MAAI,MAAM,KAAK,UAAU,CAAC,MAA1B,EAAkC;AAChC,UAAM,IAAI,KAAJ,CAAW,oDAAmD,GAAG,EAAjE,CAAN;AACD;;;AAEC,IAAA,Q;AACA,IAAA,KAAK,EAAA,CAAA,GAtB8B,YAsB9B,EAtB6C,sBAsB7C,CAAyB,YAAzB,C;AACL,IAAA,M;AACA,IAAA,I;AACA,IAAA,IAAI,EAAE,IAAI,CAAC,KAAL,CAAW,UAAU,CAAC,MAAX,CAAkB,MAA7B;;AAET","sourcesContent":["import { getLocationOrigin } from '../../utils'\nimport { searchParamsToUrlQuery } from './querystring'\n\n/**\n * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n * (e.g. `./hello`) then at least base must be.\n * Absolute urls are rejected with one exception, in the browser, absolute urls that are on\n * the current origin will be parsed as relative\n */\nexport function parseRelativeUrl(url: string, base?: string) {\n  const globalBase = new URL(\n    typeof window === 'undefined' ? 'http://n' : getLocationOrigin()\n  )\n  const resolvedBase = base ? new URL(base, globalBase) : globalBase\n  const { pathname, searchParams, search, hash, href, origin } = new URL(\n    url,\n    resolvedBase\n  )\n  if (origin !== globalBase.origin) {\n    throw new Error(`invariant: invalid relative URL, router received ${url}`)\n  }\n  return {\n    pathname,\n    query: searchParamsToUrlQuery(searchParams),\n    search,\n    hash,\n    href: href.slice(globalBase.origin.length),\n  }\n}\n"]},"metadata":{},"sourceType":"script"}