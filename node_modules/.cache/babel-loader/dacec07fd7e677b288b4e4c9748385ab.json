{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseNextUrl = parseNextUrl;\n\nvar _apiUtils = require(\"../../../../server/api-utils\");\n\nvar _getLocaleMetadata = require(\"../../i18n/get-locale-metadata\");\n\nvar _parseUrl = require(\"./parse-url\");\n\nfunction parseNextUrl({\n  headers,\n  nextConfig,\n  url = '/'\n}) {\n  const urlParsed = (0, _parseUrl).parseUrl(url);\n  const {\n    basePath\n  } = nextConfig;\n\n  if (basePath && urlParsed.pathname.startsWith(basePath)) {\n    urlParsed.pathname = urlParsed.pathname.replace(basePath, '') || '/';\n    urlParsed.basePath = basePath;\n  }\n\n  if (nextConfig.i18n) {\n    var ref;\n    urlParsed.locale = (0, _getLocaleMetadata).getLocaleMetadata({\n      cookies: (0, _apiUtils).getCookieParser(headers || {}),\n      headers: headers,\n      nextConfig: {\n        basePath: nextConfig.basePath,\n        i18n: nextConfig.i18n,\n        trailingSlash: nextConfig.trailingSlash\n      },\n      url: urlParsed\n    });\n\n    if ((ref = urlParsed.locale) === null || ref === void 0 ? void 0 : ref.path.detectedLocale) {\n      urlParsed.pathname = urlParsed.locale.path.pathname;\n    }\n  }\n\n  return urlParsed;\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/parse-next-url.ts"],"names":[],"mappings":";;;;;QAagB,Y,GAAA,Y;;AAbgB,IAAA,SAA8B,GAAA,OAAA,CAAA,8BAAA,CAA9B;;AACE,IAAA,kBAAgC,GAAA,OAAA,CAAA,gCAAA,CAAhC;;AACT,IAAA,SAAa,GAAA,OAAA,CAAA,aAAA,CAAb;;SAWT,Y,CAAY;AAAG,EAAA,OAAH;AAAY,EAAA,UAAZ;AAAwB,EAAA,GAAG,GAAA;AAA3B,C,EAA6C;AACvE,QAAM,SAAS,GAAA,CAAA,GAZQ,SAYR,EAZqB,QAYrB,CAA2B,GAA3B,CAAf;AACA,QAAK;AAAG,IAAA;AAAH,MAAgB,UAArB;;AAEA,MAAI,QAAQ,IAAI,SAAS,CAAC,QAAV,CAAmB,UAAnB,CAA8B,QAA9B,CAAhB,EAAyD;AACvD,IAAA,SAAS,CAAC,QAAV,GAAqB,SAAS,CAAC,QAAV,CAAmB,OAAnB,CAA2B,QAA3B,EAAmC,EAAnC,KAAmC,GAAxD;AACA,IAAA,SAAS,CAAC,QAAV,GAAqB,QAArB;AACD;;AAED,MAAI,UAAU,CAAC,IAAf,EAAqB;QAYf,G;AAXJ,IAAA,SAAS,CAAC,MAAV,GAAgB,CAAA,GAtBc,kBAsBd,EAtB8C,iBAsB9C,CAtB8C;AAuB5D,MAAA,OAAO,EAAA,CAAA,GAxBmB,SAwBnB,EAxBiD,eAwBjD,CAAkB,OAAO,IAAA,EAAzB,CAvBqD;AAwB5D,MAAA,OAAO,EAAE,OAxBmD;AAyB5D,MAAA,UAAU,EAAA;AACR,QAAA,QAAQ,EAAE,UAAU,CAAC,QADb;AAER,QAAA,IAAI,EAAE,UAAU,CAAC,IAFT;AAGR,QAAA,aAAa,EAAE,UAAU,CAAC;AAHlB,OAzBkD;AA8B5D,MAAA,GAAG,EAAE;AA9BuD,KAsB9C,CAAhB;;AAWA,QAAE,CAAE,GAAgB,GAAhB,SAAS,CAAC,MAAZ,MAAkB,IAAlB,IAAE,GAAgB,KAAA,KAAhB,CAAF,GAAwB,KAAtB,CAAF,GAAE,GAAgB,CAAE,IAAlB,CAAuB,cAA3B,EAA2C;AACzC,MAAA,SAAS,CAAC,QAAV,GAAqB,SAAS,CAAC,MAAV,CAAiB,IAAjB,CAAsB,QAA3C;AACD;AACF;;SAEM,S;AACR","sourcesContent":["import { getCookieParser } from '../../../../server/api-utils'\nimport { getLocaleMetadata } from '../../i18n/get-locale-metadata'\nimport { parseUrl } from './parse-url'\nimport type { NextConfig, DomainLocale } from '../../../../server/config-shared'\nimport type { ParsedUrl } from './parse-url'\nimport type { PathLocale } from '../../i18n/normalize-locale-path'\n\ninterface Params {\n  headers?: { [key: string]: string | string[] | undefined }\n  nextConfig: NextConfig\n  url?: string\n}\n\nexport function parseNextUrl({ headers, nextConfig, url = '/' }: Params) {\n  const urlParsed: ParsedNextUrl = parseUrl(url)\n  const { basePath } = nextConfig\n\n  if (basePath && urlParsed.pathname.startsWith(basePath)) {\n    urlParsed.pathname = urlParsed.pathname.replace(basePath, '') || '/'\n    urlParsed.basePath = basePath\n  }\n\n  if (nextConfig.i18n) {\n    urlParsed.locale = getLocaleMetadata({\n      cookies: getCookieParser(headers || {}),\n      headers: headers,\n      nextConfig: {\n        basePath: nextConfig.basePath,\n        i18n: nextConfig.i18n,\n        trailingSlash: nextConfig.trailingSlash,\n      },\n      url: urlParsed,\n    })\n\n    if (urlParsed.locale?.path.detectedLocale) {\n      urlParsed.pathname = urlParsed.locale.path.pathname\n    }\n  }\n\n  return urlParsed\n}\n\nexport interface ParsedNextUrl extends ParsedUrl {\n  basePath?: string\n  locale?: {\n    defaultLocale: string\n    domain?: DomainLocale\n    locale: string\n    path: PathLocale\n    redirect?: string\n    trailingSlash?: boolean\n  }\n}\n"]},"metadata":{},"sourceType":"script"}