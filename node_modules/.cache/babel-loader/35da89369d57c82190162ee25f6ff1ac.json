{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encryptWithSecret = encryptWithSecret;\nexports.decryptWithSecret = decryptWithSecret;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Background:\n// https://security.stackexchange.com/questions/184305/why-would-i-ever-use-aes-256-cbc-if-aes-256-gcm-is-more-secure\n\n\nconst CIPHER_ALGORITHM = `aes-256-gcm`,\n      CIPHER_KEY_LENGTH = 32,\n      CIPHER_IV_LENGTH = 16,\n      CIPHER_TAG_LENGTH = 16,\n      CIPHER_SALT_LENGTH = 64;\nconst PBKDF2_ITERATIONS = 100000 // https://support.1password.com/pbkdf2/\n;\n\nfunction encryptWithSecret(secret, data) {\n  const iv = _crypto.default.randomBytes(CIPHER_IV_LENGTH);\n\n  const salt = _crypto.default.randomBytes(CIPHER_SALT_LENGTH); // https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\n\n\n  const key = _crypto.default.pbkdf2Sync(secret, salt, PBKDF2_ITERATIONS, CIPHER_KEY_LENGTH, `sha512`);\n\n  const cipher = _crypto.default.createCipheriv(CIPHER_ALGORITHM, key, iv);\n\n  const encrypted = Buffer.concat([cipher.update(data, `utf8`), cipher.final()]); // https://nodejs.org/api/crypto.html#crypto_cipher_getauthtag\n\n  const tag = cipher.getAuthTag();\n  return Buffer.concat([// Data as required by:\n  // Salt for Key: https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\n  // IV: https://nodejs.org/api/crypto.html#crypto_class_decipher\n  // Tag: https://nodejs.org/api/crypto.html#crypto_decipher_setauthtag_buffer\n  salt, iv, tag, encrypted]).toString(`hex`);\n}\n\nfunction decryptWithSecret(secret, encryptedData) {\n  const buffer = Buffer.from(encryptedData, `hex`);\n  const salt = buffer.slice(0, CIPHER_SALT_LENGTH);\n  const iv = buffer.slice(CIPHER_SALT_LENGTH, CIPHER_SALT_LENGTH + CIPHER_IV_LENGTH);\n  const tag = buffer.slice(CIPHER_SALT_LENGTH + CIPHER_IV_LENGTH, CIPHER_SALT_LENGTH + CIPHER_IV_LENGTH + CIPHER_TAG_LENGTH);\n  const encrypted = buffer.slice(CIPHER_SALT_LENGTH + CIPHER_IV_LENGTH + CIPHER_TAG_LENGTH); // https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\n\n  const key = _crypto.default.pbkdf2Sync(secret, salt, PBKDF2_ITERATIONS, CIPHER_KEY_LENGTH, `sha512`);\n\n  const decipher = _crypto.default.createDecipheriv(CIPHER_ALGORITHM, key, iv);\n\n  decipher.setAuthTag(tag);\n  return decipher.update(encrypted) + decipher.final(`utf8`);\n}","map":{"version":3,"sources":["../../server/crypto-utils.ts"],"names":[],"mappings":";;;;;QAagB,iB,GAAA,iB;QA+BA,iB,GAAA,iB;;AA5CG,IAAA,OAAQ,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAR;;;;;;EAEnB;AACA;;;AAEA,MAAM,gBAAgB,GAAI,aAA1B;AAAA,MACE,iBAAiB,GAAG,EADtB;AAAA,MAEE,gBAAgB,GAAG,EAFrB;AAAA,MAGE,iBAAiB,GAAG,EAHtB;AAAA,MAIE,kBAAkB,GAAG,EAJvB;AAMA,MAAM,iBAAiB,GAAG,MAA1B,CAAkC;AAAlC;;SAEgB,iB,CAAkB,M,EAAgB,I,EAAsB;AACtE,QAAM,EAAE,GAdS,OAAQ,CAAA,OAAR,CAcC,WAdD,CAca,gBAdb,CAcjB;;AACA,QAAM,IAAI,GAfO,OAAQ,CAAA,OAAR,CAeG,WAfH,CAee,kBAff,CAejB,CAFsE,CAItE;;;AACA,QAAM,GAAG,GAlBQ,OAAQ,CAAA,OAAR,CAkBE,UAlBF,CAmBf,MAnBe,EAoBf,IApBe,EAqBf,iBArBe,EAsBf,iBAtBe,EAuBd,QAvBc,CAkBjB;;AAQA,QAAM,MAAM,GA1BK,OAAQ,CAAA,OAAR,CA0BK,cA1BL,CA0BoB,gBA1BpB,EA0BsC,GA1BtC,EA0B2C,EA1B3C,CA0BjB;;AACA,QAAM,SAAS,GAAG,MAAM,CAAC,MAAP,CAAa,CAAE,MAAM,CAAC,MAAP,CAAc,IAAd,EAAqB,MAArB,CAAF,EAA+B,MAAM,CAAC,KAAP,EAA/B,CAAb,CAAlB,CAdsE,CAgBtE;;AACA,QAAM,GAAG,GAAG,MAAM,CAAC,UAAP,EAAZ;SAEO,MAAM,CAAC,MAAP,CAAa,CAClB;AACA;AACA;AACA;AACA,EAAA,IALkB,EAMlB,EANkB,EAOlB,GAPkB,EAQlB,SARkB,CAAb,EASJ,QATI,CASM,KATN,C;AAUR;;SAEe,iB,CACd,M,EACA,a,EACQ;AACR,QAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,aAAZ,EAA4B,KAA5B,CAAf;AAEA,QAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,kBAAhB,CAAb;AACA,QAAM,EAAE,GAAG,MAAM,CAAC,KAAP,CACT,kBADS,EAET,kBAAkB,GAAG,gBAFZ,CAAX;AAIA,QAAM,GAAG,GAAG,MAAM,CAAC,KAAP,CACV,kBAAkB,GAAG,gBADX,EAEV,kBAAkB,GAAG,gBAArB,GAAwC,iBAF9B,CAAZ;AAIA,QAAM,SAAS,GAAG,MAAM,CAAC,KAAP,CAChB,kBAAkB,GAAG,gBAArB,GAAwC,iBADxB,CAAlB,CAZQ,CAgBR;;AACA,QAAM,GAAG,GAhEQ,OAAQ,CAAA,OAAR,CAgEE,UAhEF,CAiEf,MAjEe,EAkEf,IAlEe,EAmEf,iBAnEe,EAoEf,iBApEe,EAqEd,QArEc,CAgEjB;;AAQA,QAAM,QAAQ,GAxEG,OAAQ,CAAA,OAAR,CAwEO,gBAxEP,CAwEwB,gBAxExB,EAwE0C,GAxE1C,EAwE+C,EAxE/C,CAwEjB;;AACA,EAAA,QAAQ,CAAC,UAAT,CAAoB,GAApB;SAEO,QAAQ,CAAC,MAAT,CAAgB,SAAhB,IAA6B,QAAQ,CAAC,KAAT,CAAgB,MAAhB,C;AACrC","sourcesContent":["import crypto from 'crypto'\n\n// Background:\n// https://security.stackexchange.com/questions/184305/why-would-i-ever-use-aes-256-cbc-if-aes-256-gcm-is-more-secure\n\nconst CIPHER_ALGORITHM = `aes-256-gcm`,\n  CIPHER_KEY_LENGTH = 32, // https://stackoverflow.com/a/28307668/4397028\n  CIPHER_IV_LENGTH = 16, // https://stackoverflow.com/a/28307668/4397028\n  CIPHER_TAG_LENGTH = 16,\n  CIPHER_SALT_LENGTH = 64\n\nconst PBKDF2_ITERATIONS = 100_000 // https://support.1password.com/pbkdf2/\n\nexport function encryptWithSecret(secret: Buffer, data: string): string {\n  const iv = crypto.randomBytes(CIPHER_IV_LENGTH)\n  const salt = crypto.randomBytes(CIPHER_SALT_LENGTH)\n\n  // https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\n  const key = crypto.pbkdf2Sync(\n    secret,\n    salt,\n    PBKDF2_ITERATIONS,\n    CIPHER_KEY_LENGTH,\n    `sha512`\n  )\n\n  const cipher = crypto.createCipheriv(CIPHER_ALGORITHM, key, iv)\n  const encrypted = Buffer.concat([cipher.update(data, `utf8`), cipher.final()])\n\n  // https://nodejs.org/api/crypto.html#crypto_cipher_getauthtag\n  const tag = cipher.getAuthTag()\n\n  return Buffer.concat([\n    // Data as required by:\n    // Salt for Key: https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\n    // IV: https://nodejs.org/api/crypto.html#crypto_class_decipher\n    // Tag: https://nodejs.org/api/crypto.html#crypto_decipher_setauthtag_buffer\n    salt,\n    iv,\n    tag,\n    encrypted,\n  ]).toString(`hex`)\n}\n\nexport function decryptWithSecret(\n  secret: Buffer,\n  encryptedData: string\n): string {\n  const buffer = Buffer.from(encryptedData, `hex`)\n\n  const salt = buffer.slice(0, CIPHER_SALT_LENGTH)\n  const iv = buffer.slice(\n    CIPHER_SALT_LENGTH,\n    CIPHER_SALT_LENGTH + CIPHER_IV_LENGTH\n  )\n  const tag = buffer.slice(\n    CIPHER_SALT_LENGTH + CIPHER_IV_LENGTH,\n    CIPHER_SALT_LENGTH + CIPHER_IV_LENGTH + CIPHER_TAG_LENGTH\n  )\n  const encrypted = buffer.slice(\n    CIPHER_SALT_LENGTH + CIPHER_IV_LENGTH + CIPHER_TAG_LENGTH\n  )\n\n  // https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\n  const key = crypto.pbkdf2Sync(\n    secret,\n    salt,\n    PBKDF2_ITERATIONS,\n    CIPHER_KEY_LENGTH,\n    `sha512`\n  )\n\n  const decipher = crypto.createDecipheriv(CIPHER_ALGORITHM, key, iv)\n  decipher.setAuthTag(tag)\n\n  return decipher.update(encrypted) + decipher.final(`utf8`)\n}\n"]},"metadata":{},"sourceType":"script"}