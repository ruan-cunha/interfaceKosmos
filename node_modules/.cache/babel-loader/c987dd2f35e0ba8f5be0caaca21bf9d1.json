{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"install\", {\n  enumerable: true,\n  get: function () {\n    return _configUtilsWorker.install;\n  }\n});\nObject.defineProperty(exports, \"shouldLoadWithWebpack5\", {\n  enumerable: true,\n  get: function () {\n    return _configUtilsWorker.shouldLoadWithWebpack5;\n  }\n});\nexports.loadWebpackHook = loadWebpackHook;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _jestWorker = require(\"jest-worker\");\n\nvar Log = _interopRequireWildcard(require(\"../build/output/log\"));\n\nvar _configUtilsWorker = require(\"./config-utils-worker\");\n\nvar _constants = require(\"../shared/lib/constants\");\n\nvar _utils = require(\"./lib/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction reasonMessage(reason) {\n  switch (reason) {\n    case 'default':\n      return 'Enabled by default';\n\n    case 'flag-disabled':\n      return 'webpack5 flag is set to false in next.config.js';\n\n    case 'test-mode':\n      return 'internal test mode';\n\n    default:\n      return '';\n  }\n}\n\nasync function loadWebpackHook(phase, dir) {\n  let useWebpack5 = true;\n  let usesRemovedFlag = false;\n  const worker = new _jestWorker.Worker(_path.default.resolve(__dirname, './config-utils-worker.js'), {\n    enableWorkerThreads: false,\n    numWorkers: 1,\n    forkOptions: {\n      env: { ...process.env,\n        NODE_OPTIONS: (0, _utils).getNodeOptionsWithoutInspect()\n      }\n    }\n  });\n\n  try {\n    const result = await worker.shouldLoadWithWebpack5(phase, dir);\n\n    if (result.reason === 'future-flag') {\n      usesRemovedFlag = true;\n    } else {\n      if (phase !== _constants.PHASE_PRODUCTION_SERVER) {\n        Log.info(`Using webpack ${result.enabled ? '5' : '4'}. Reason: ${reasonMessage(result.reason)} https://nextjs.org/docs/messages/webpack5`);\n      }\n    }\n\n    useWebpack5 = Boolean(result.enabled);\n  } catch {// If this errors, it likely will do so again upon boot, so we just swallow\n    // it here.\n  } finally {\n    worker.end();\n  }\n\n  if (usesRemovedFlag) {\n    throw new Error('`future.webpack5` in `next.config.js` has moved to the top level `webpack5` flag https://nextjs.org/docs/messages/future-webpack5-moved-to-webpack5');\n  }\n\n  (0, _configUtilsWorker).install(useWebpack5);\n}","map":{"version":3,"sources":["../../server/config-utils.ts"],"names":[],"mappings":";;;;;+BAQS,S,EAAO;kBAAA;;WAJgC,kBAAuB,CAAA,O;;AAIvD,C;+BAAE,wB,EAAsB;kBAAA;;WAJQ,kBAAuB,CAAA,sB;;AAI/B,C;QAelB,e,GAAA,e;;AAvBL,IAAA,KAAM,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAN;;AACM,IAAA,WAAa,GAAA,OAAA,CAAA,aAAA,CAAb;;AACX,IAAA,GAAG,GAAA,uBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAH;;AAEoC,IAAA,kBAAuB,GAAA,OAAA,CAAA,uBAAA,CAAvB;;AACR,IAAA,UAAyB,GAAA,OAAA,CAAA,yBAAA,CAAzB;;AACK,IAAA,MAAa,GAAA,OAAA,CAAA,aAAA,CAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAIpC,a,CAAc,M,EAAsB;UACnC,M;SACD,S;aACI,oB;;SACJ,e;aACI,iD;;SACJ,W;aACI,oB;;;;;AAIZ;;eAEqB,e,CAAgB,K,EAAe,G,EAAa;AAChE,MAAI,WAAW,GAAG,IAAlB;AACA,MAAI,eAAe,GAAG,KAAtB;AACA,QAAM,MAAM,GAAG,IAzBM,WAAa,CAAA,MAyBnB,CA1BA,KAAM,CAAA,OAAN,CA2BR,OA3BQ,CA2BA,SA3BA,EA2BS,0BA3BT,CA0BA,EACqC;AAEhD,IAAA,mBAAmB,EAAE,KAF2B;AAGhD,IAAA,UAAU,EAAE,CAHoC;AAIhD,IAAA,WAAW,EAAA;AACT,MAAA,GAAG,EAAA,E,GACE,OAAO,CAAC,GADV;AAED,QAAA,YAAY,EAAA,CAAA,GA5BuB,MA4BvB,EA5BoC,4BA4BpC;AAFX;AADM;AAJqC,GADrC,CAAf;;MAeI;AACF,UAAM,MAAM,GAAA,MAAsB,MAAM,CAAC,sBAAP,CAA8B,KAA9B,EAAqC,GAArC,CAAlC;;AACA,QAAI,MAAM,CAAC,MAAP,KAAa,aAAjB,EAAqC;AACnC,MAAA,eAAe,GAAG,IAAlB;AACD,KAFD,MAEO;AACL,UAAI,KAAK,KAzCyB,UAAyB,CAAA,uBAyC3D,EAAuC;AA5CjC,QAAA,GAAG,CA6CH,IA7CA,CA8CD,iBAAgB,MAAM,CAAC,OAAP,GAAc,GAAd,GAAoB,GAAO,aAAY,aAAa,CACnE,MAAM,CAAC,MAD4D,CAEnE,4CAhDA;AAkDL;AACF;;AAED,IAAA,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,OAAR,CAArB;AACD,G,CAAA,MAAO,CACN;AACA;AACD,G,SAAS;AACR,IAAA,MAAM,CAAC,GAAP;AACD;;AAED,MAAI,eAAJ,EAAqB;AACnB,UAAM,IAAI,KAAJ,CAAS,qJAAT,CAAN;AAGD;;MA/D6C,kB,EAAuB,O,CAiE7D,W;AACT","sourcesContent":["import path from 'path'\nimport { Worker } from 'jest-worker'\nimport * as Log from '../build/output/log'\nimport { CheckReasons, CheckResult } from './config-utils-worker'\nimport { install, shouldLoadWithWebpack5 } from './config-utils-worker'\nimport { PHASE_PRODUCTION_SERVER } from '../shared/lib/constants'\nimport { getNodeOptionsWithoutInspect } from './lib/utils'\n\nexport { install, shouldLoadWithWebpack5 }\n\nfunction reasonMessage(reason: CheckReasons) {\n  switch (reason) {\n    case 'default':\n      return 'Enabled by default'\n    case 'flag-disabled':\n      return 'webpack5 flag is set to false in next.config.js'\n    case 'test-mode':\n      return 'internal test mode'\n    default:\n      return ''\n  }\n}\n\nexport async function loadWebpackHook(phase: string, dir: string) {\n  let useWebpack5 = true\n  let usesRemovedFlag = false\n  const worker = new Worker(\n    path.resolve(__dirname, './config-utils-worker.js'),\n    {\n      enableWorkerThreads: false,\n      numWorkers: 1,\n      forkOptions: {\n        env: {\n          ...process.env,\n          NODE_OPTIONS: getNodeOptionsWithoutInspect(),\n        },\n      },\n    }\n  ) as Worker & {\n    shouldLoadWithWebpack5: typeof import('./config-utils-worker').shouldLoadWithWebpack5\n  }\n  try {\n    const result: CheckResult = await worker.shouldLoadWithWebpack5(phase, dir)\n    if (result.reason === 'future-flag') {\n      usesRemovedFlag = true\n    } else {\n      if (phase !== PHASE_PRODUCTION_SERVER) {\n        Log.info(\n          `Using webpack ${result.enabled ? '5' : '4'}. Reason: ${reasonMessage(\n            result.reason\n          )} https://nextjs.org/docs/messages/webpack5`\n        )\n      }\n    }\n\n    useWebpack5 = Boolean(result.enabled)\n  } catch {\n    // If this errors, it likely will do so again upon boot, so we just swallow\n    // it here.\n  } finally {\n    worker.end()\n  }\n\n  if (usesRemovedFlag) {\n    throw new Error(\n      '`future.webpack5` in `next.config.js` has moved to the top level `webpack5` flag https://nextjs.org/docs/messages/future-webpack5-moved-to-webpack5'\n    )\n  }\n\n  install(useWebpack5)\n}\n"]},"metadata":{},"sourceType":"script"}