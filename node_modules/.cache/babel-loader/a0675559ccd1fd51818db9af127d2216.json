{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypeScriptConfiguration = getTypeScriptConfiguration;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _path1 = _interopRequireDefault(require(\"path\"));\n\nvar _fatalError = require(\"../fatal-error\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nasync function getTypeScriptConfiguration(ts, tsConfigPath, metaOnly) {\n  try {\n    var ref;\n    const formatDiagnosticsHost = {\n      getCanonicalFileName: fileName => fileName,\n      getCurrentDirectory: ts.sys.getCurrentDirectory,\n      getNewLine: () => _os.default.EOL\n    };\n    const {\n      config,\n      error\n    } = ts.readConfigFile(tsConfigPath, ts.sys.readFile);\n\n    if (error) {\n      throw new _fatalError.FatalError(ts.formatDiagnostic(error, formatDiagnosticsHost));\n    }\n\n    let configToParse = config;\n    const result = ts.parseJsonConfigFileContent(configToParse, // When only interested in meta info,\n    // avoid enumerating all files (for performance reasons)\n    metaOnly ? { ...ts.sys,\n\n      readDirectory(_path, extensions, _excludes, _includes, _depth) {\n        return [extensions ? `file${extensions[0]}` : `file.ts`];\n      }\n\n    } : ts.sys, _path1.default.dirname(tsConfigPath));\n\n    if (result.errors) {\n      result.errors = result.errors.filter(({\n        code\n      }) => // No inputs were found in config file\n      code !== 18003);\n    }\n\n    if ((ref = result.errors) === null || ref === void 0 ? void 0 : ref.length) {\n      throw new _fatalError.FatalError(ts.formatDiagnostic(result.errors[0], formatDiagnosticsHost));\n    }\n\n    return result;\n  } catch (err) {\n    if ((err === null || err === void 0 ? void 0 : err.name) === 'SyntaxError') {\n      var ref1;\n      const reason = '\\n' + ((ref1 = err === null || err === void 0 ? void 0 : err.message) !== null && ref1 !== void 0 ? ref1 : '');\n      throw new _fatalError.FatalError(_chalk.default.red.bold('Could not parse', _chalk.default.cyan('tsconfig.json') + '.' + ' Please make sure it contains syntactically correct JSON.') + reason);\n    }\n\n    throw err;\n  }\n}","map":{"version":3,"sources":["../../../lib/typescript/getTypeScriptConfiguration.ts"],"names":[],"mappings":";;;;;QAMsB,0B,GAAA,0B;;AANJ,IAAA,MAAO,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAP;;AACH,IAAA,GAAI,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAJ;;AACE,IAAA,MAAM,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAN;;AAEU,IAAA,WAAgB,GAAA,OAAA,CAAA,gBAAA,CAAhB;;;;;;;;eAEL,0B,CACpB,E,EACA,Y,EACA,Q,EACiD;MAC7C;QAqCE,G;AApCJ,UAAM,qBAAqB,GAAA;AACzB,MAAA,oBAAoB,EAAG,QAAH,IAAwB,QADnB;AAEzB,MAAA,mBAAmB,EAAE,EAAE,CAAC,GAAH,CAAO,mBAFH;AAGzB,MAAA,UAAU,EAAA,MAdD,GAAI,CAAA,OAAJ,CAcY;AAHI,KAA3B;AAMA,UAAK;AAAG,MAAA,MAAH;AAAW,MAAA;AAAX,QAAqB,EAAE,CAAC,cAAH,CAAkB,YAAlB,EAAgC,EAAE,CAAC,GAAH,CAAO,QAAvC,CAA1B;;AACA,QAAI,KAAJ,EAAW;AACT,YAAM,IAhBe,WAAgB,CAAA,UAgB/B,CAAe,EAAE,CAAC,gBAAH,CAAoB,KAApB,EAA2B,qBAA3B,CAAf,CAAN;AACD;;AAED,QAAI,aAAa,GAAQ,MAAzB;AAEA,UAAM,MAAM,GAAG,EAAE,CAAC,0BAAH,CACb,aADa,EAEb;AACA;AACA,IAAA,QAAQ,GAAA,E,GAEC,EAAE,CAAC,GAFJ;;AAGF,MAAA,aAAa,CAAC,KAAD,EAAQ,UAAR,EAAoB,SAApB,EAA+B,SAA/B,EAA0C,MAA1C,EAAkD;gBACrD,UAAU,GAAI,OAAM,UAAU,CAAC,CAAD,CAAE,EAAtB,GAA6B,S;AAChD;;AALC,KAAA,GAOJ,EAAE,CAAC,GAXM,EAvBF,MAAM,CAAA,OAAN,CAmCN,OAnCM,CAmCE,YAnCF,CAuBE,CAAf;;AAeA,QAAI,MAAM,CAAC,MAAX,EAAmB;AACjB,MAAA,MAAM,CAAC,MAAP,GAAgB,MAAM,CAAC,MAAP,CAAc,MAAd,CAAoB,CAAA;AAC/B,QAAA;AAD+B,OAAA,KAEhC;AACA,MAAA,IAAI,KAAK,KAHG,CAAhB;AAKD;;AAED,QAAE,CAAE,GAAa,GAAb,MAAM,CAAC,MAAT,MAAe,IAAf,IAAE,GAAa,KAAA,KAAb,CAAF,GAAuB,KAArB,CAAF,GAAE,GAAa,CAAE,MAAnB,EAA2B;AACzB,YAAM,IA7Ce,WAAgB,CAAA,UA6C/B,CACJ,EAAE,CAAC,gBAAH,CAAoB,MAAM,CAAC,MAAP,CAAc,CAAd,CAApB,EAAsC,qBAAtC,CADI,CAAN;AAGD;;WAEM,M;AACR,G,CAAA,OAAQ,GAAR,EAAa;AACZ,QAAE,CAAE,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAH,CAAA,GAAS,KAAT,CAAA,GAAA,GAAG,CAAE,IAAP,MAAW,aAAb,EAAiC;UACR,I;AAAvB,YAAM,MAAM,GAAA,QAAO,CAAI,IAAY,GAAZ,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAH,CAAA,GAAY,KAAZ,CAAA,GAAA,GAAG,CAAE,OAAT,MAAgB,IAAhB,IAAI,IAAY,KAAA,KAAA,CAAhB,GAAI,IAAJ,GAAgB,EAAvB,CAAZ;AACA,YAAM,IAtDe,WAAgB,CAAA,UAsD/B,CA1DM,MAAO,CAAA,OAAP,CA2DJ,GA3DI,CA2DA,IA3DA,CA2DI,iBA3DJ,EAAA,MAAO,CAAA,OAAP,CA6DF,IA7DE,CA6DE,eA7DF,IA6DkB,GA7DlB,GA8DH,2DA9DG,IAgEN,MANA,CAAN;AAQD;;AACD,UAAM,GAAN;AACD;AACF","sourcesContent":["import chalk from 'chalk'\nimport os from 'os'\nimport path from 'path'\n\nimport { FatalError } from '../fatal-error'\n\nexport async function getTypeScriptConfiguration(\n  ts: typeof import('typescript'),\n  tsConfigPath: string,\n  metaOnly?: boolean\n): Promise<import('typescript').ParsedCommandLine> {\n  try {\n    const formatDiagnosticsHost: import('typescript').FormatDiagnosticsHost = {\n      getCanonicalFileName: (fileName: string) => fileName,\n      getCurrentDirectory: ts.sys.getCurrentDirectory,\n      getNewLine: () => os.EOL,\n    }\n\n    const { config, error } = ts.readConfigFile(tsConfigPath, ts.sys.readFile)\n    if (error) {\n      throw new FatalError(ts.formatDiagnostic(error, formatDiagnosticsHost))\n    }\n\n    let configToParse: any = config\n\n    const result = ts.parseJsonConfigFileContent(\n      configToParse,\n      // When only interested in meta info,\n      // avoid enumerating all files (for performance reasons)\n      metaOnly\n        ? {\n            ...ts.sys,\n            readDirectory(_path, extensions, _excludes, _includes, _depth) {\n              return [extensions ? `file${extensions[0]}` : `file.ts`]\n            },\n          }\n        : ts.sys,\n      path.dirname(tsConfigPath)\n    )\n\n    if (result.errors) {\n      result.errors = result.errors.filter(\n        ({ code }) =>\n          // No inputs were found in config file\n          code !== 18003\n      )\n    }\n\n    if (result.errors?.length) {\n      throw new FatalError(\n        ts.formatDiagnostic(result.errors[0], formatDiagnosticsHost)\n      )\n    }\n\n    return result\n  } catch (err) {\n    if (err?.name === 'SyntaxError') {\n      const reason = '\\n' + (err?.message ?? '')\n      throw new FatalError(\n        chalk.red.bold(\n          'Could not parse',\n          chalk.cyan('tsconfig.json') +\n            '.' +\n            ' Please make sure it contains syntactically correct JSON.'\n        ) + reason\n      )\n    }\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"script"}