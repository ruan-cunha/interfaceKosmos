{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRequiredConfiguration = getRequiredConfiguration;\nexports.writeConfigurationDefaults = writeConfigurationDefaults;\n\nvar _fs = require(\"fs\");\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar CommentJson = _interopRequireWildcard(require(\"next/dist/compiled/comment-json\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _getTypeScriptConfiguration = require(\"./getTypeScriptConfiguration\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction getDesiredCompilerOptions(ts) {\n  const o = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    target: {\n      suggested: 'es5'\n    },\n    lib: {\n      suggested: ['dom', 'dom.iterable', 'esnext']\n    },\n    allowJs: {\n      suggested: true\n    },\n    skipLibCheck: {\n      suggested: true\n    },\n    strict: {\n      suggested: false\n    },\n    forceConsistentCasingInFileNames: {\n      suggested: true\n    },\n    noEmit: {\n      suggested: true\n    },\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    esModuleInterop: {\n      value: true,\n      reason: 'requirement for babel'\n    },\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      // All of these values work:\n      parsedValues: [ts.ModuleKind.ES2020, ts.ModuleKind.ESNext, ts.ModuleKind.CommonJS, ts.ModuleKind.AMD],\n      value: 'esnext',\n      reason: 'for dynamic import() support'\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution'\n    },\n    resolveJsonModule: {\n      value: true,\n      reason: 'to match webpack resolution'\n    },\n    isolatedModules: {\n      value: true,\n      reason: 'requirement for babel'\n    },\n    jsx: {\n      parsedValue: ts.JsxEmit.Preserve,\n      value: 'preserve',\n      reason: 'next.js implements its own optimized jsx transform'\n    }\n  };\n  return o;\n}\n\nfunction getRequiredConfiguration(ts) {\n  const res = {};\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts);\n\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    const ev = desiredCompilerOptions[optionKey];\n\n    if (!('value' in ev)) {\n      continue;\n    }\n\n    var _parsedValue;\n\n    res[optionKey] = (_parsedValue = ev.parsedValue) !== null && _parsedValue !== void 0 ? _parsedValue : ev.value;\n  }\n\n  return res;\n}\n\nasync function writeConfigurationDefaults(ts, tsConfigPath, isFirstTimeSetup) {\n  if (isFirstTimeSetup) {\n    await _fs.promises.writeFile(tsConfigPath, '{}' + _os.default.EOL);\n  }\n\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts);\n  const {\n    options: tsOptions,\n    raw: rawConfig\n  } = await (0, _getTypeScriptConfiguration).getTypeScriptConfiguration(ts, tsConfigPath, true);\n  const userTsConfigContent = await _fs.promises.readFile(tsConfigPath, {\n    encoding: 'utf8'\n  });\n  const userTsConfig = CommentJson.parse(userTsConfigContent);\n\n  if (userTsConfig.compilerOptions == null && !('extends' in rawConfig)) {\n    userTsConfig.compilerOptions = {};\n    isFirstTimeSetup = true;\n  }\n\n  const suggestedActions = [];\n  const requiredActions = [];\n\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    const check = desiredCompilerOptions[optionKey];\n\n    if ('suggested' in check) {\n      if (!(optionKey in tsOptions)) {\n        userTsConfig.compilerOptions[optionKey] = check.suggested;\n        suggestedActions.push(_chalk.default.cyan(optionKey) + ' was set to ' + _chalk.default.bold(check.suggested));\n      }\n    } else if ('value' in check) {\n      var ref;\n      const ev = tsOptions[optionKey];\n\n      if (!('parsedValues' in check ? (ref = check.parsedValues) === null || ref === void 0 ? void 0 : ref.includes(ev) : 'parsedValue' in check ? check.parsedValue === ev : check.value === ev)) {\n        userTsConfig.compilerOptions[optionKey] = check.value;\n        requiredActions.push(_chalk.default.cyan(optionKey) + ' was set to ' + _chalk.default.bold(check.value) + ` (${check.reason})`);\n      }\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const _ = check;\n    }\n  }\n\n  if (!('include' in rawConfig)) {\n    userTsConfig.include = ['next-env.d.ts', '**/*.ts', '**/*.tsx'];\n    suggestedActions.push(_chalk.default.cyan('include') + ' was set to ' + _chalk.default.bold(`['next-env.d.ts', '**/*.ts', '**/*.tsx']`));\n  }\n\n  if (!('exclude' in rawConfig)) {\n    userTsConfig.exclude = ['node_modules'];\n    suggestedActions.push(_chalk.default.cyan('exclude') + ' was set to ' + _chalk.default.bold(`['node_modules']`));\n  }\n\n  if (suggestedActions.length < 1 && requiredActions.length < 1) {\n    return;\n  }\n\n  await _fs.promises.writeFile(tsConfigPath, CommentJson.stringify(userTsConfig, null, 2) + _os.default.EOL);\n\n  if (isFirstTimeSetup) {\n    console.log(_chalk.default.green(`We detected TypeScript in your project and created a ${_chalk.default.bold('tsconfig.json')} file for you.`) + '\\n');\n    return;\n  }\n\n  console.log(_chalk.default.green(`We detected TypeScript in your project and reconfigured your ${_chalk.default.bold('tsconfig.json')} file for you. Strict-mode is set to ${_chalk.default.bold('false')} by default.`) + '\\n');\n\n  if (suggestedActions.length) {\n    console.log(`The following suggested values were added to your ${_chalk.default.cyan('tsconfig.json')}. These values ${_chalk.default.bold('can be changed')} to fit your project's needs:\\n`);\n    suggestedActions.forEach(action => console.log(`\\t- ${action}`));\n    console.log('');\n  }\n\n  if (requiredActions.length) {\n    console.log(`The following ${_chalk.default.bold('mandatory changes')} were made to your ${_chalk.default.cyan('tsconfig.json')}:\\n`);\n    requiredActions.forEach(action => console.log(`\\t- ${action}`));\n    console.log('');\n  }\n}","map":{"version":3,"sources":["../../../lib/typescript/writeConfigurationDefaults.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs'\nimport chalk from 'chalk'\nimport * as CommentJson from 'next/dist/compiled/comment-json'\nimport os from 'os'\nimport { getTypeScriptConfiguration } from './getTypeScriptConfiguration'\n\ntype DesiredCompilerOptionsShape = {\n  [key: string]:\n    | { suggested: any }\n    | {\n        parsedValue?: any\n        parsedValues?: Array<any>\n        value: any\n        reason: string\n      }\n}\n\nfunction getDesiredCompilerOptions(\n  ts: typeof import('typescript')\n): DesiredCompilerOptionsShape {\n  const o: DesiredCompilerOptionsShape = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    target: { suggested: 'es5' },\n    lib: { suggested: ['dom', 'dom.iterable', 'esnext'] },\n    allowJs: { suggested: true },\n    skipLibCheck: { suggested: true },\n    strict: { suggested: false },\n    forceConsistentCasingInFileNames: { suggested: true },\n    noEmit: { suggested: true },\n\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    esModuleInterop: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      // All of these values work:\n      parsedValues: [\n        ts.ModuleKind.ES2020,\n        ts.ModuleKind.ESNext,\n        ts.ModuleKind.CommonJS,\n        ts.ModuleKind.AMD,\n      ],\n      value: 'esnext',\n      reason: 'for dynamic import() support',\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution',\n    },\n    resolveJsonModule: { value: true, reason: 'to match webpack resolution' },\n    isolatedModules: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    jsx: {\n      parsedValue: ts.JsxEmit.Preserve,\n      value: 'preserve',\n      reason: 'next.js implements its own optimized jsx transform',\n    },\n  }\n\n  return o\n}\n\nexport function getRequiredConfiguration(\n  ts: typeof import('typescript')\n): Partial<import('typescript').CompilerOptions> {\n  const res: Partial<import('typescript').CompilerOptions> = {}\n\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts)\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    const ev = desiredCompilerOptions[optionKey]\n    if (!('value' in ev)) {\n      continue\n    }\n    res[optionKey] = ev.parsedValue ?? ev.value\n  }\n\n  return res\n}\n\nexport async function writeConfigurationDefaults(\n  ts: typeof import('typescript'),\n  tsConfigPath: string,\n  isFirstTimeSetup: boolean\n): Promise<void> {\n  if (isFirstTimeSetup) {\n    await fs.writeFile(tsConfigPath, '{}' + os.EOL)\n  }\n\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts)\n  const { options: tsOptions, raw: rawConfig } =\n    await getTypeScriptConfiguration(ts, tsConfigPath, true)\n\n  const userTsConfigContent = await fs.readFile(tsConfigPath, {\n    encoding: 'utf8',\n  })\n  const userTsConfig = CommentJson.parse(userTsConfigContent)\n  if (userTsConfig.compilerOptions == null && !('extends' in rawConfig)) {\n    userTsConfig.compilerOptions = {}\n    isFirstTimeSetup = true\n  }\n\n  const suggestedActions: string[] = []\n  const requiredActions: string[] = []\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    const check = desiredCompilerOptions[optionKey]\n    if ('suggested' in check) {\n      if (!(optionKey in tsOptions)) {\n        userTsConfig.compilerOptions[optionKey] = check.suggested\n        suggestedActions.push(\n          chalk.cyan(optionKey) + ' was set to ' + chalk.bold(check.suggested)\n        )\n      }\n    } else if ('value' in check) {\n      const ev = tsOptions[optionKey]\n      if (\n        !('parsedValues' in check\n          ? check.parsedValues?.includes(ev)\n          : 'parsedValue' in check\n          ? check.parsedValue === ev\n          : check.value === ev)\n      ) {\n        userTsConfig.compilerOptions[optionKey] = check.value\n        requiredActions.push(\n          chalk.cyan(optionKey) +\n            ' was set to ' +\n            chalk.bold(check.value) +\n            ` (${check.reason})`\n        )\n      }\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const _: never = check\n    }\n  }\n\n  if (!('include' in rawConfig)) {\n    userTsConfig.include = ['next-env.d.ts', '**/*.ts', '**/*.tsx']\n    suggestedActions.push(\n      chalk.cyan('include') +\n        ' was set to ' +\n        chalk.bold(`['next-env.d.ts', '**/*.ts', '**/*.tsx']`)\n    )\n  }\n\n  if (!('exclude' in rawConfig)) {\n    userTsConfig.exclude = ['node_modules']\n    suggestedActions.push(\n      chalk.cyan('exclude') + ' was set to ' + chalk.bold(`['node_modules']`)\n    )\n  }\n\n  if (suggestedActions.length < 1 && requiredActions.length < 1) {\n    return\n  }\n\n  await fs.writeFile(\n    tsConfigPath,\n    CommentJson.stringify(userTsConfig, null, 2) + os.EOL\n  )\n\n  if (isFirstTimeSetup) {\n    console.log(\n      chalk.green(\n        `We detected TypeScript in your project and created a ${chalk.bold(\n          'tsconfig.json'\n        )} file for you.`\n      ) + '\\n'\n    )\n    return\n  }\n\n  console.log(\n    chalk.green(\n      `We detected TypeScript in your project and reconfigured your ${chalk.bold(\n        'tsconfig.json'\n      )} file for you. Strict-mode is set to ${chalk.bold('false')} by default.`\n    ) + '\\n'\n  )\n  if (suggestedActions.length) {\n    console.log(\n      `The following suggested values were added to your ${chalk.cyan(\n        'tsconfig.json'\n      )}. These values ${chalk.bold(\n        'can be changed'\n      )} to fit your project's needs:\\n`\n    )\n\n    suggestedActions.forEach((action) => console.log(`\\t- ${action}`))\n\n    console.log('')\n  }\n\n  if (requiredActions.length) {\n    console.log(\n      `The following ${chalk.bold(\n        'mandatory changes'\n      )} were made to your ${chalk.cyan('tsconfig.json')}:\\n`\n    )\n\n    requiredActions.forEach((action) => console.log(`\\t- ${action}`))\n\n    console.log('')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}