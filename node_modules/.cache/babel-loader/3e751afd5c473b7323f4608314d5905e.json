{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _asyncRetry = _interopRequireDefault(require(\"next/dist/compiled/async-retry\"));\n\nvar _crypto = require(\"crypto\");\n\nvar _nodeFetch = _interopRequireDefault(require(\"node-fetch\"));\n\nvar Log = _interopRequireWildcard(require(\"../../../build/output/log\"));\n\nvar _toZipkin = require(\"./to-zipkin\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nlet traceId;\nlet batch;\nconst localEndpoint = {\n  serviceName: 'nextjs',\n  ipv4: '127.0.0.1',\n  port: 9411\n}; // Jaeger supports Zipkin's reporting API\n\nconst zipkinUrl = `http://${localEndpoint.ipv4}:${localEndpoint.port}`;\nconst jaegerWebUiUrl = `http://${localEndpoint.ipv4}:16686`;\nconst zipkinAPI = `${zipkinUrl}/api/v2/spans`;\n\nfunction logWebUrl() {\n  Log.info(`Jaeger trace will be available on ${jaegerWebUiUrl}/trace/${traceId}`);\n}\n\nconst reportToLocalHost = (name, duration, timestamp, id, parentId, attrs) => {\n  if (!traceId) {\n    traceId = process.env.TRACE_ID || (0, _crypto).randomBytes(8).toString('hex');\n    logWebUrl();\n  }\n\n  if (!batch) {\n    batch = (0, _toZipkin).batcher(events => {\n      const eventsJson = JSON.stringify(events); // Ensure ECONNRESET error is retried 3 times before erroring out\n\n      return (0, _asyncRetry).default(() => // Send events to zipkin\n      (0, _nodeFetch).default(zipkinAPI, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: eventsJson\n      }), {\n        minTimeout: 500,\n        retries: 3,\n        factor: 1\n      }).then(async res => {\n        if (res.status !== 202) {\n          console.log({\n            status: res.status,\n            body: await res.text(),\n            events: eventsJson\n          });\n        }\n      }).catch(console.log);\n    });\n  }\n\n  batch.report({\n    traceId,\n    parentId,\n    name,\n    id,\n    timestamp,\n    duration,\n    localEndpoint,\n    tags: attrs\n  });\n};\n\nvar _default = {\n  flushAll: () => batch ? batch.flushAll().then(() => logWebUrl()) : undefined,\n  report: reportToLocalHost\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../../telemetry/trace/report/to-jaeger.ts"],"names":[],"mappings":";;;;;;;AAAkB,IAAA,WAAgC,GAAA,sBAAA,CAAA,OAAA,CAAA,gCAAA,CAAA,CAAhC;;AACU,IAAA,OAAQ,GAAA,OAAA,CAAA,QAAA,CAAR;;AACV,IAAA,UAAY,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAZ;;AACN,IAAA,GAAG,GAAA,uBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAH;;AAEY,IAAA,SAAa,GAAA,OAAA,CAAA,aAAA,CAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAExB,IAAI,OAAJ;AACA,IAAI,KAAJ;AAEA,MAAM,aAAa,GAAA;AACjB,EAAA,WAAW,EAAA,QADM;AAEjB,EAAA,IAAI,EAAA,WAFa;AAGjB,EAAA,IAAI,EAAE;AAHW,CAAnB,C,CAKA;;AACA,MAAM,SAAS,GAAI,UAAS,aAAa,CAAC,IAAK,IAAG,aAAa,CAAC,IAAI,EAApE;AACA,MAAM,cAAc,GAAI,UAAS,aAAa,CAAC,IAAK,QAApD;AACA,MAAM,SAAS,GAAA,GAAM,SAAU,eAA/B;;SAES,S,GAAY;AAjBT,EAAA,GAAG,CAkBT,IAlBM,CAmBP,qCAAoC,cAAe,UAAS,OAAO,EAnB5D;AAqBX;;AAED,MAAM,iBAAiB,GAAA,CACrB,IADqB,EAErB,QAFqB,EAGrB,SAHqB,EAIrB,EAJqB,EAKrB,QALqB,EAMrB,KANqB,KAOlB;AACH,MAAE,CAAG,OAAL,EAAc;AACZ,IAAA,OAAO,GAAG,OAAO,CAAC,GAAR,CAAY,QAAZ,IAAoB,CAAA,GAlCN,OAkCM,EAlCE,WAkCF,CAAgB,CAAhB,EAAmB,QAAnB,CAA2B,KAA3B,CAA9B;AACA,IAAA,SAAS;AACV;;AAED,MAAE,CAAG,KAAL,EAAY;AACV,IAAA,KAAK,GAAA,CAAA,GAnCe,SAmCf,EAnC4B,OAmC5B,CAAY,MAnCgB,IAmCL;AAC1B,YAAM,UAAU,GAAG,IAAI,CAAC,SAAL,CAAe,MAAf,CAAnB,CAD0B,CAE1B;;iBA1CY,W,EAAgC,O,CAAA,MA6CxC;UA3CQ,U,EAAY,O,CA4Cd,S,EAAS;AACb,QAAA,MAAM,EAAA,MADO;AAEb,QAAA,OAAO,EAAA;AAAI,0BAAc;AAAlB,SAFM;AAGb,QAAA,IAAI,EAAE;AAHO,O;AAKf,QAAA,UAAU,EAAE,G;AAAK,QAAA,OAAO,EAAE,C;AAAG,QAAA,MAAM,EAAE;SAEtC,I,CAAI,MAAQ,GAAR,IAAqB;AACxB,YAAI,GAAG,CAAC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,UAAA,OAAO,CAAC,GAAR,CAAW;AACT,YAAA,MAAM,EAAE,GAAG,CAAC,MADH;AAET,YAAA,IAAI,EAAA,MAAQ,GAAG,CAAC,IAAJ,EAFH;AAGT,YAAA,MAAM,EAAE;AAHC,WAAX;AAKD;AACF,O,EACA,K,CAAM,OAAO,CAAC,G;AAClB,KAvBI,CAAL;AAwBD;;AAED,EAAA,KAAK,CAAC,MAAN,CAAY;AACV,IAAA,OADU;AAEV,IAAA,QAFU;AAGV,IAAA,IAHU;AAIV,IAAA,EAJU;AAKV,IAAA,SALU;AAMV,IAAA,QANU;AAOV,IAAA,aAPU;AAQV,IAAA,IAAI,EAAE;AARI,GAAZ;AAUD,CAlDD;;;AAqDE,EAAA,QAAQ,EAAA,MACN,KAAK,GAAG,KAAK,CAAC,QAAN,GAAiB,IAAjB,CAAqB,MAAO,SAAS,EAArC,CAAH,GAA8C,S;AACrD,EAAA,MAAM,EAAE","sourcesContent":["import retry from 'next/dist/compiled/async-retry'\nimport { randomBytes } from 'crypto'\nimport fetch from 'node-fetch'\nimport * as Log from '../../../build/output/log'\n// Jaeger uses Zipkin's reporting\nimport { batcher } from './to-zipkin'\n\nlet traceId: string\nlet batch: ReturnType<typeof batcher> | undefined\n\nconst localEndpoint = {\n  serviceName: 'nextjs',\n  ipv4: '127.0.0.1',\n  port: 9411,\n}\n// Jaeger supports Zipkin's reporting API\nconst zipkinUrl = `http://${localEndpoint.ipv4}:${localEndpoint.port}`\nconst jaegerWebUiUrl = `http://${localEndpoint.ipv4}:16686`\nconst zipkinAPI = `${zipkinUrl}/api/v2/spans`\n\nfunction logWebUrl() {\n  Log.info(\n    `Jaeger trace will be available on ${jaegerWebUiUrl}/trace/${traceId}`\n  )\n}\n\nconst reportToLocalHost = (\n  name: string,\n  duration: number,\n  timestamp: number,\n  id: string,\n  parentId?: string,\n  attrs?: Object\n) => {\n  if (!traceId) {\n    traceId = process.env.TRACE_ID || randomBytes(8).toString('hex')\n    logWebUrl()\n  }\n\n  if (!batch) {\n    batch = batcher((events) => {\n      const eventsJson = JSON.stringify(events)\n      // Ensure ECONNRESET error is retried 3 times before erroring out\n      return retry(\n        () =>\n          // Send events to zipkin\n          fetch(zipkinAPI, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: eventsJson,\n          }),\n        { minTimeout: 500, retries: 3, factor: 1 }\n      )\n        .then(async (res: any) => {\n          if (res.status !== 202) {\n            console.log({\n              status: res.status,\n              body: await res.text(),\n              events: eventsJson,\n            })\n          }\n        })\n        .catch(console.log)\n    })\n  }\n\n  batch.report({\n    traceId,\n    parentId,\n    name,\n    id,\n    timestamp,\n    duration,\n    localEndpoint,\n    tags: attrs,\n  })\n}\n\nexport default {\n  flushAll: () =>\n    batch ? batch.flushAll().then(() => logWebUrl()) : undefined,\n  report: reportToLocalHost,\n}\n"]},"metadata":{},"sourceType":"script"}